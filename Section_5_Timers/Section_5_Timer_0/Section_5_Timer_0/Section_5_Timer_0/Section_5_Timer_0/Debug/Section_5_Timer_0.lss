
Section_5_Timer_0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000012a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000019e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800060  00800060  0000019e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000019e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  0000020c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006dc  00000000  00000000  0000026c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000606  00000000  00000000  00000948  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000312  00000000  00000000  00000f4e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b8  00000000  00000000  00001260  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000035a  00000000  00000000  00001318  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000cc  00000000  00000000  00001672  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  0000173e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__vector_10>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a4 36       	cpi	r26, 0x64	; 100
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 93 00 	jmp	0x126	; 0x126 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:
#include "headers//headers.h"

int main(void)
{

	SETBIT(DDRD,2);
  7c:	81 b3       	in	r24, 0x11	; 17
  7e:	84 60       	ori	r24, 0x04	; 4
  80:	81 bb       	out	0x11, r24	; 17

	// CTC mode example
	//timer0_CTC_init(249);
	
	// Frequency generator mode example:  frequency Generated  = 16000000 / ((255+1) * 2) = 3125 hz = 3.125 khz
	timer0_FG_init(255);
  82:	8f ef       	ldi	r24, 0xFF	; 255
  84:	90 e0       	ldi	r25, 0x00	; 0
  86:	0e 94 8b 00 	call	0x116	; 0x116 <timer0_FG_init>
  8a:	ff cf       	rjmp	.-2      	; 0x8a <main+0xe>

0000008c <__vector_11>:
	count   0 => 625000
*/
// timer 0 normal mode ISR
// note : TIMER0_OVF_vect source from interrupt vector table
ISR(TIMER0_OVF_vect)
{
  8c:	1f 92       	push	r1
  8e:	0f 92       	push	r0
  90:	0f b6       	in	r0, 0x3f	; 63
  92:	0f 92       	push	r0
  94:	11 24       	eor	r1, r1
  96:	2f 93       	push	r18
  98:	8f 93       	push	r24
  9a:	9f 93       	push	r25
	static uint16_t count = 0;
	count++;
  9c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <count.1738>
  a0:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <count.1738+0x1>
  a4:	01 96       	adiw	r24, 0x01	; 1
  a6:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <count.1738+0x1>
  aa:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <count.1738>
	if(count == 62500)
  ae:	84 32       	cpi	r24, 0x24	; 36
  b0:	94 4f       	sbci	r25, 0xF4	; 244
  b2:	41 f4       	brne	.+16     	; 0xc4 <__vector_11+0x38>
	{
		count = 0;
  b4:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <count.1738+0x1>
  b8:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <count.1738>
		TOGBIT(PORTD,2);
  bc:	92 b3       	in	r25, 0x12	; 18
  be:	84 e0       	ldi	r24, 0x04	; 4
  c0:	89 27       	eor	r24, r25
  c2:	82 bb       	out	0x12, r24	; 18
	}
}
  c4:	9f 91       	pop	r25
  c6:	8f 91       	pop	r24
  c8:	2f 91       	pop	r18
  ca:	0f 90       	pop	r0
  cc:	0f be       	out	0x3f, r0	; 63
  ce:	0f 90       	pop	r0
  d0:	1f 90       	pop	r1
  d2:	18 95       	reti

000000d4 <__vector_10>:
	count = 62.5 = 62
*/
// timer 0 CTC mode ISR
// note : TIMER0_COMP_vect source from interrupt vector table
ISR(TIMER0_COMP_vect)
{
  d4:	1f 92       	push	r1
  d6:	0f 92       	push	r0
  d8:	0f b6       	in	r0, 0x3f	; 63
  da:	0f 92       	push	r0
  dc:	11 24       	eor	r1, r1
  de:	8f 93       	push	r24
  e0:	9f 93       	push	r25
	static uint16_t count = 0;
	count++;
  e2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  e6:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  ea:	01 96       	adiw	r24, 0x01	; 1
  ec:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  f0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	if(count == 62)
  f4:	ce 97       	sbiw	r24, 0x3e	; 62
  f6:	41 f4       	brne	.+16     	; 0x108 <__vector_10+0x34>
	{
		count = 0;
  f8:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  fc:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
		TOGBIT(PORTD,2);
 100:	92 b3       	in	r25, 0x12	; 18
 102:	84 e0       	ldi	r24, 0x04	; 4
 104:	89 27       	eor	r24, r25
 106:	82 bb       	out	0x12, r24	; 18
	}
 108:	9f 91       	pop	r25
 10a:	8f 91       	pop	r24
 10c:	0f 90       	pop	r0
 10e:	0f be       	out	0x3f, r0	; 63
 110:	0f 90       	pop	r0
 112:	1f 90       	pop	r1
 114:	18 95       	reti

00000116 <timer0_FG_init>:


void timer0_FG_init(uint8_t value)
{
	// configure OC0 pin output
	SETBIT(DDRB,3);
 116:	97 b3       	in	r25, 0x17	; 23
 118:	98 60       	ori	r25, 0x08	; 8
 11a:	97 bb       	out	0x17, r25	; 23
	
	// enable FG mode with 1024 prescaler
	// CTC : WGM00 = 0		WGM01 = 1
	// 1024 prescaler : CS00 = 1		CS01 = 0	CS02 = 1
	TCCR0 |= (1<<CS00) | (1<<CS02) | (1<<WGM01) | (1<<COM00);
 11c:	93 b7       	in	r25, 0x33	; 51
 11e:	9d 61       	ori	r25, 0x1D	; 29
 120:	93 bf       	out	0x33, r25	; 51
		
	OCR0 = value;
 122:	8c bf       	out	0x3c, r24	; 60
 124:	08 95       	ret

00000126 <_exit>:
 126:	f8 94       	cli

00000128 <__stop_program>:
 128:	ff cf       	rjmp	.-2      	; 0x128 <__stop_program>
