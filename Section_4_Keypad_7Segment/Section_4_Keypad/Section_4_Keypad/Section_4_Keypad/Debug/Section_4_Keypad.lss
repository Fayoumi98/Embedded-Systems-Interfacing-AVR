
Section_4_Keypad.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003da  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  000003da  0000044e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000045e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000490  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000088  00000000  00000000  000004cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000cde  00000000  00000000  00000554  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007cc  00000000  00000000  00001232  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000891  00000000  00000000  000019fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000f8  00000000  00000000  00002290  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003c5  00000000  00000000  00002388  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000605  00000000  00000000  0000274d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  00002d52  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ed       	ldi	r30, 0xDA	; 218
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 db 01 	call	0x3b6	; 0x3b6 <main>
  7a:	0c 94 eb 01 	jmp	0x3d6	; 0x3d6 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <keypad_init>:
};


void keypad_init(void)
{
	INIT_KEYPAD();
  82:	8f e0       	ldi	r24, 0x0F	; 15
  84:	81 bb       	out	0x11, r24	; 17
  86:	8f ef       	ldi	r24, 0xFF	; 255
  88:	82 bb       	out	0x12, r24	; 18
  8a:	08 95       	ret

0000008c <keypad_read>:


int8_t keypad_read(void)
{
	uint8_t i ;
	for(i = 0 ; i < 4 ; i++ )
  8c:	e0 e0       	ldi	r30, 0x00	; 0
  8e:	6e c0       	rjmp	.+220    	; 0x16c <keypad_read+0xe0>
	{
		switch(i)
  90:	e1 30       	cpi	r30, 0x01	; 1
  92:	99 f0       	breq	.+38     	; 0xba <keypad_read+0x2e>
  94:	28 f0       	brcs	.+10     	; 0xa0 <keypad_read+0x14>
  96:	e2 30       	cpi	r30, 0x02	; 2
  98:	e9 f0       	breq	.+58     	; 0xd4 <keypad_read+0x48>
  9a:	e3 30       	cpi	r30, 0x03	; 3
  9c:	41 f1       	breq	.+80     	; 0xee <keypad_read+0x62>
  9e:	33 c0       	rjmp	.+102    	; 0x106 <keypad_read+0x7a>
		{
			case 0 : KP0(0); KP1(1); KP2(1); KP3(1); break;
  a0:	82 b3       	in	r24, 0x12	; 18
  a2:	8e 7f       	andi	r24, 0xFE	; 254
  a4:	82 bb       	out	0x12, r24	; 18
  a6:	82 b3       	in	r24, 0x12	; 18
  a8:	82 60       	ori	r24, 0x02	; 2
  aa:	82 bb       	out	0x12, r24	; 18
  ac:	82 b3       	in	r24, 0x12	; 18
  ae:	84 60       	ori	r24, 0x04	; 4
  b0:	82 bb       	out	0x12, r24	; 18
  b2:	82 b3       	in	r24, 0x12	; 18
  b4:	88 60       	ori	r24, 0x08	; 8
  b6:	82 bb       	out	0x12, r24	; 18
  b8:	26 c0       	rjmp	.+76     	; 0x106 <keypad_read+0x7a>
			case 1 : KP0(1); KP1(0); KP2(1); KP3(1); break;
  ba:	82 b3       	in	r24, 0x12	; 18
  bc:	81 60       	ori	r24, 0x01	; 1
  be:	82 bb       	out	0x12, r24	; 18
  c0:	82 b3       	in	r24, 0x12	; 18
  c2:	8d 7f       	andi	r24, 0xFD	; 253
  c4:	82 bb       	out	0x12, r24	; 18
  c6:	82 b3       	in	r24, 0x12	; 18
  c8:	84 60       	ori	r24, 0x04	; 4
  ca:	82 bb       	out	0x12, r24	; 18
  cc:	82 b3       	in	r24, 0x12	; 18
  ce:	88 60       	ori	r24, 0x08	; 8
  d0:	82 bb       	out	0x12, r24	; 18
  d2:	19 c0       	rjmp	.+50     	; 0x106 <keypad_read+0x7a>
			case 2 : KP0(1); KP1(1); KP2(0); KP3(1); break;
  d4:	82 b3       	in	r24, 0x12	; 18
  d6:	81 60       	ori	r24, 0x01	; 1
  d8:	82 bb       	out	0x12, r24	; 18
  da:	82 b3       	in	r24, 0x12	; 18
  dc:	82 60       	ori	r24, 0x02	; 2
  de:	82 bb       	out	0x12, r24	; 18
  e0:	82 b3       	in	r24, 0x12	; 18
  e2:	8b 7f       	andi	r24, 0xFB	; 251
  e4:	82 bb       	out	0x12, r24	; 18
  e6:	82 b3       	in	r24, 0x12	; 18
  e8:	88 60       	ori	r24, 0x08	; 8
  ea:	82 bb       	out	0x12, r24	; 18
  ec:	0c c0       	rjmp	.+24     	; 0x106 <keypad_read+0x7a>
			case 3 : KP0(1); KP1(1); KP2(1); KP3(0); break;
  ee:	82 b3       	in	r24, 0x12	; 18
  f0:	81 60       	ori	r24, 0x01	; 1
  f2:	82 bb       	out	0x12, r24	; 18
  f4:	82 b3       	in	r24, 0x12	; 18
  f6:	82 60       	ori	r24, 0x02	; 2
  f8:	82 bb       	out	0x12, r24	; 18
  fa:	82 b3       	in	r24, 0x12	; 18
  fc:	84 60       	ori	r24, 0x04	; 4
  fe:	82 bb       	out	0x12, r24	; 18
 100:	82 b3       	in	r24, 0x12	; 18
 102:	87 7f       	andi	r24, 0xF7	; 247
 104:	82 bb       	out	0x12, r24	; 18
		}
		
		if(KP4() == 0) return keypad_matrix[0 + 4*i];
 106:	84 99       	sbic	0x10, 4	; 16
 108:	09 c0       	rjmp	.+18     	; 0x11c <keypad_read+0x90>
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	ee 0f       	add	r30, r30
 10e:	ff 1f       	adc	r31, r31
 110:	ee 0f       	add	r30, r30
 112:	ff 1f       	adc	r31, r31
 114:	e0 5a       	subi	r30, 0xA0	; 160
 116:	ff 4f       	sbci	r31, 0xFF	; 255
 118:	80 81       	ld	r24, Z
 11a:	08 95       	ret
		if(KP5() == 0) return keypad_matrix[1 + 4*i];
 11c:	85 99       	sbic	0x10, 5	; 16
 11e:	09 c0       	rjmp	.+18     	; 0x132 <keypad_read+0xa6>
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	ee 0f       	add	r30, r30
 124:	ff 1f       	adc	r31, r31
 126:	ee 0f       	add	r30, r30
 128:	ff 1f       	adc	r31, r31
 12a:	ef 59       	subi	r30, 0x9F	; 159
 12c:	ff 4f       	sbci	r31, 0xFF	; 255
 12e:	80 81       	ld	r24, Z
 130:	08 95       	ret
		if(KP6() == 0) return keypad_matrix[2 + 4*i];
 132:	86 99       	sbic	0x10, 6	; 16
 134:	09 c0       	rjmp	.+18     	; 0x148 <keypad_read+0xbc>
 136:	f0 e0       	ldi	r31, 0x00	; 0
 138:	ee 0f       	add	r30, r30
 13a:	ff 1f       	adc	r31, r31
 13c:	ee 0f       	add	r30, r30
 13e:	ff 1f       	adc	r31, r31
 140:	ee 59       	subi	r30, 0x9E	; 158
 142:	ff 4f       	sbci	r31, 0xFF	; 255
 144:	80 81       	ld	r24, Z
 146:	08 95       	ret
		if(KP7() == 0) return keypad_matrix[3 + 4*i];
 148:	87 99       	sbic	0x10, 7	; 16
 14a:	09 c0       	rjmp	.+18     	; 0x15e <keypad_read+0xd2>
 14c:	f0 e0       	ldi	r31, 0x00	; 0
 14e:	ee 0f       	add	r30, r30
 150:	ff 1f       	adc	r31, r31
 152:	ee 0f       	add	r30, r30
 154:	ff 1f       	adc	r31, r31
 156:	ed 59       	subi	r30, 0x9D	; 157
 158:	ff 4f       	sbci	r31, 0xFF	; 255
 15a:	80 81       	ld	r24, Z
 15c:	08 95       	ret
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 15e:	8f e9       	ldi	r24, 0x9F	; 159
 160:	9f e0       	ldi	r25, 0x0F	; 15
 162:	01 97       	sbiw	r24, 0x01	; 1
 164:	f1 f7       	brne	.-4      	; 0x162 <keypad_read+0xd6>
 166:	00 c0       	rjmp	.+0      	; 0x168 <keypad_read+0xdc>
 168:	00 00       	nop


int8_t keypad_read(void)
{
	uint8_t i ;
	for(i = 0 ; i < 4 ; i++ )
 16a:	ef 5f       	subi	r30, 0xFF	; 255
 16c:	e4 30       	cpi	r30, 0x04	; 4
 16e:	08 f4       	brcc	.+2      	; 0x172 <keypad_read+0xe6>
 170:	8f cf       	rjmp	.-226    	; 0x90 <keypad_read+0x4>
		
		_delay_ms(1);
	}
	
	// if not pressed return -1 
	return -1;	
 172:	8f ef       	ldi	r24, 0xFF	; 255
}
 174:	08 95       	ret

00000176 <LCD_write_command>:
}

void LCD_write_command(uint8_t cmd)
{
	// Sending Command
	RS(0);
 176:	9b b3       	in	r25, 0x1b	; 27
 178:	97 7f       	andi	r25, 0xF7	; 247
 17a:	9b bb       	out	0x1b, r25	; 27
	
	// Send Most Significant Nibble of command
	D7(READBIT(cmd,7));
 17c:	88 23       	and	r24, r24
 17e:	24 f0       	brlt	.+8      	; 0x188 <LCD_write_command+0x12>
 180:	9b b3       	in	r25, 0x1b	; 27
 182:	9f 77       	andi	r25, 0x7F	; 127
 184:	9b bb       	out	0x1b, r25	; 27
 186:	03 c0       	rjmp	.+6      	; 0x18e <LCD_write_command+0x18>
 188:	9b b3       	in	r25, 0x1b	; 27
 18a:	90 68       	ori	r25, 0x80	; 128
 18c:	9b bb       	out	0x1b, r25	; 27
	D6(READBIT(cmd,6));
 18e:	86 fd       	sbrc	r24, 6
 190:	04 c0       	rjmp	.+8      	; 0x19a <LCD_write_command+0x24>
 192:	9b b3       	in	r25, 0x1b	; 27
 194:	9f 7b       	andi	r25, 0xBF	; 191
 196:	9b bb       	out	0x1b, r25	; 27
 198:	03 c0       	rjmp	.+6      	; 0x1a0 <LCD_write_command+0x2a>
 19a:	9b b3       	in	r25, 0x1b	; 27
 19c:	90 64       	ori	r25, 0x40	; 64
 19e:	9b bb       	out	0x1b, r25	; 27
	D5(READBIT(cmd,5));
 1a0:	85 fd       	sbrc	r24, 5
 1a2:	04 c0       	rjmp	.+8      	; 0x1ac <LCD_write_command+0x36>
 1a4:	9b b3       	in	r25, 0x1b	; 27
 1a6:	9f 7d       	andi	r25, 0xDF	; 223
 1a8:	9b bb       	out	0x1b, r25	; 27
 1aa:	03 c0       	rjmp	.+6      	; 0x1b2 <LCD_write_command+0x3c>
 1ac:	9b b3       	in	r25, 0x1b	; 27
 1ae:	90 62       	ori	r25, 0x20	; 32
 1b0:	9b bb       	out	0x1b, r25	; 27
	D4(READBIT(cmd,4));
 1b2:	84 fd       	sbrc	r24, 4
 1b4:	04 c0       	rjmp	.+8      	; 0x1be <LCD_write_command+0x48>
 1b6:	9b b3       	in	r25, 0x1b	; 27
 1b8:	9f 7e       	andi	r25, 0xEF	; 239
 1ba:	9b bb       	out	0x1b, r25	; 27
 1bc:	03 c0       	rjmp	.+6      	; 0x1c4 <LCD_write_command+0x4e>
 1be:	9b b3       	in	r25, 0x1b	; 27
 1c0:	90 61       	ori	r25, 0x10	; 16
 1c2:	9b bb       	out	0x1b, r25	; 27
	
	TRIGGER_LCD();
 1c4:	9b b3       	in	r25, 0x1b	; 27
 1c6:	94 60       	ori	r25, 0x04	; 4
 1c8:	9b bb       	out	0x1b, r25	; 27
 1ca:	ef e9       	ldi	r30, 0x9F	; 159
 1cc:	ff e0       	ldi	r31, 0x0F	; 15
 1ce:	31 97       	sbiw	r30, 0x01	; 1
 1d0:	f1 f7       	brne	.-4      	; 0x1ce <LCD_write_command+0x58>
 1d2:	00 c0       	rjmp	.+0      	; 0x1d4 <LCD_write_command+0x5e>
 1d4:	00 00       	nop
 1d6:	9b b3       	in	r25, 0x1b	; 27
 1d8:	9b 7f       	andi	r25, 0xFB	; 251
 1da:	9b bb       	out	0x1b, r25	; 27
 1dc:	ef e9       	ldi	r30, 0x9F	; 159
 1de:	ff e0       	ldi	r31, 0x0F	; 15
 1e0:	31 97       	sbiw	r30, 0x01	; 1
 1e2:	f1 f7       	brne	.-4      	; 0x1e0 <LCD_write_command+0x6a>
 1e4:	00 c0       	rjmp	.+0      	; 0x1e6 <LCD_write_command+0x70>
 1e6:	00 00       	nop
	
	// Send Least Significant Nibble of command
	D7(READBIT(cmd,3));
 1e8:	83 fd       	sbrc	r24, 3
 1ea:	04 c0       	rjmp	.+8      	; 0x1f4 <LCD_write_command+0x7e>
 1ec:	9b b3       	in	r25, 0x1b	; 27
 1ee:	9f 77       	andi	r25, 0x7F	; 127
 1f0:	9b bb       	out	0x1b, r25	; 27
 1f2:	03 c0       	rjmp	.+6      	; 0x1fa <LCD_write_command+0x84>
 1f4:	9b b3       	in	r25, 0x1b	; 27
 1f6:	90 68       	ori	r25, 0x80	; 128
 1f8:	9b bb       	out	0x1b, r25	; 27
	D6(READBIT(cmd,2));
 1fa:	82 fd       	sbrc	r24, 2
 1fc:	04 c0       	rjmp	.+8      	; 0x206 <LCD_write_command+0x90>
 1fe:	9b b3       	in	r25, 0x1b	; 27
 200:	9f 7b       	andi	r25, 0xBF	; 191
 202:	9b bb       	out	0x1b, r25	; 27
 204:	03 c0       	rjmp	.+6      	; 0x20c <LCD_write_command+0x96>
 206:	9b b3       	in	r25, 0x1b	; 27
 208:	90 64       	ori	r25, 0x40	; 64
 20a:	9b bb       	out	0x1b, r25	; 27
	D5(READBIT(cmd,1));
 20c:	81 fd       	sbrc	r24, 1
 20e:	04 c0       	rjmp	.+8      	; 0x218 <LCD_write_command+0xa2>
 210:	9b b3       	in	r25, 0x1b	; 27
 212:	9f 7d       	andi	r25, 0xDF	; 223
 214:	9b bb       	out	0x1b, r25	; 27
 216:	03 c0       	rjmp	.+6      	; 0x21e <LCD_write_command+0xa8>
 218:	9b b3       	in	r25, 0x1b	; 27
 21a:	90 62       	ori	r25, 0x20	; 32
 21c:	9b bb       	out	0x1b, r25	; 27
	D4(READBIT(cmd,0));
 21e:	80 fd       	sbrc	r24, 0
 220:	04 c0       	rjmp	.+8      	; 0x22a <LCD_write_command+0xb4>
 222:	8b b3       	in	r24, 0x1b	; 27
 224:	8f 7e       	andi	r24, 0xEF	; 239
 226:	8b bb       	out	0x1b, r24	; 27
 228:	03 c0       	rjmp	.+6      	; 0x230 <LCD_write_command+0xba>
 22a:	8b b3       	in	r24, 0x1b	; 27
 22c:	80 61       	ori	r24, 0x10	; 16
 22e:	8b bb       	out	0x1b, r24	; 27
		
	TRIGGER_LCD();
 230:	8b b3       	in	r24, 0x1b	; 27
 232:	84 60       	ori	r24, 0x04	; 4
 234:	8b bb       	out	0x1b, r24	; 27
 236:	8f e9       	ldi	r24, 0x9F	; 159
 238:	9f e0       	ldi	r25, 0x0F	; 15
 23a:	01 97       	sbiw	r24, 0x01	; 1
 23c:	f1 f7       	brne	.-4      	; 0x23a <LCD_write_command+0xc4>
 23e:	00 c0       	rjmp	.+0      	; 0x240 <LCD_write_command+0xca>
 240:	00 00       	nop
 242:	8b b3       	in	r24, 0x1b	; 27
 244:	8b 7f       	andi	r24, 0xFB	; 251
 246:	8b bb       	out	0x1b, r24	; 27
 248:	ef e9       	ldi	r30, 0x9F	; 159
 24a:	ff e0       	ldi	r31, 0x0F	; 15
 24c:	31 97       	sbiw	r30, 0x01	; 1
 24e:	f1 f7       	brne	.-4      	; 0x24c <LCD_write_command+0xd6>
 250:	00 c0       	rjmp	.+0      	; 0x252 <LCD_write_command+0xdc>
 252:	00 00       	nop
 254:	08 95       	ret

00000256 <LCD_init>:
#include "headers/LCD.h"

void LCD_init(void)
{
	// Step 1 : initialize all pins as output (D7,D6,D5,D4,RS,EN)
	INIT_LCD_PINS();
 256:	8a b3       	in	r24, 0x1a	; 26
 258:	8c 6f       	ori	r24, 0xFC	; 252
 25a:	8a bb       	out	0x1a, r24	; 26
 25c:	8b b3       	in	r24, 0x1b	; 27
 25e:	83 70       	andi	r24, 0x03	; 3
 260:	8b bb       	out	0x1b, r24	; 27
	// Send command 0x3 and wait for 4 mSec (repeat this process 3  times)
	LCD_write_command(0x3);
 262:	83 e0       	ldi	r24, 0x03	; 3
 264:	0e 94 bb 00 	call	0x176	; 0x176 <LCD_write_command>
 268:	8f e7       	ldi	r24, 0x7F	; 127
 26a:	9e e3       	ldi	r25, 0x3E	; 62
 26c:	01 97       	sbiw	r24, 0x01	; 1
 26e:	f1 f7       	brne	.-4      	; 0x26c <LCD_init+0x16>
 270:	00 c0       	rjmp	.+0      	; 0x272 <LCD_init+0x1c>
 272:	00 00       	nop
	DELAY_MS(4);
	LCD_write_command(0x3);
 274:	83 e0       	ldi	r24, 0x03	; 3
 276:	0e 94 bb 00 	call	0x176	; 0x176 <LCD_write_command>
 27a:	8f e7       	ldi	r24, 0x7F	; 127
 27c:	9e e3       	ldi	r25, 0x3E	; 62
 27e:	01 97       	sbiw	r24, 0x01	; 1
 280:	f1 f7       	brne	.-4      	; 0x27e <LCD_init+0x28>
 282:	00 c0       	rjmp	.+0      	; 0x284 <LCD_init+0x2e>
 284:	00 00       	nop
	DELAY_MS(4);
	LCD_write_command(0x3);
 286:	83 e0       	ldi	r24, 0x03	; 3
 288:	0e 94 bb 00 	call	0x176	; 0x176 <LCD_write_command>
 28c:	8f e7       	ldi	r24, 0x7F	; 127
 28e:	9e e3       	ldi	r25, 0x3E	; 62
 290:	01 97       	sbiw	r24, 0x01	; 1
 292:	f1 f7       	brne	.-4      	; 0x290 <LCD_init+0x3a>
 294:	00 c0       	rjmp	.+0      	; 0x296 <LCD_init+0x40>
 296:	00 00       	nop
	DELAY_MS(4);
	// Send command 0x2 to enable 4 bit mode
	LCD_write_command(0x2);
 298:	82 e0       	ldi	r24, 0x02	; 2
 29a:	0e 94 bb 00 	call	0x176	; 0x176 <LCD_write_command>
	// Send command 0x28 to enable both lines to write on
	LCD_write_command(0x28);
 29e:	88 e2       	ldi	r24, 0x28	; 40
 2a0:	0e 94 bb 00 	call	0x176	; 0x176 <LCD_write_command>
	// Send command 0x08 to disable cursor display (Optional)
	LCD_write_command(0x08);
 2a4:	88 e0       	ldi	r24, 0x08	; 8
 2a6:	0e 94 bb 00 	call	0x176	; 0x176 <LCD_write_command>
	// Send command 0x01 to clear LCD
	LCD_write_command(0x01);
 2aa:	81 e0       	ldi	r24, 0x01	; 1
 2ac:	0e 94 bb 00 	call	0x176	; 0x176 <LCD_write_command>
	// Send command 0x06 to to make cursor increment to right
	LCD_write_command(0x06);
 2b0:	86 e0       	ldi	r24, 0x06	; 6
 2b2:	0e 94 bb 00 	call	0x176	; 0x176 <LCD_write_command>
	LCD_write_command(0x01);
 2b6:	81 e0       	ldi	r24, 0x01	; 1
 2b8:	0e 94 bb 00 	call	0x176	; 0x176 <LCD_write_command>
	// Send command 0x0C to turn on display
	LCD_write_command(0x0C);
 2bc:	8c e0       	ldi	r24, 0x0C	; 12
 2be:	0e 94 bb 00 	call	0x176	; 0x176 <LCD_write_command>
 2c2:	9f ef       	ldi	r25, 0xFF	; 255
 2c4:	29 ef       	ldi	r18, 0xF9	; 249
 2c6:	80 e0       	ldi	r24, 0x00	; 0
 2c8:	91 50       	subi	r25, 0x01	; 1
 2ca:	20 40       	sbci	r18, 0x00	; 0
 2cc:	80 40       	sbci	r24, 0x00	; 0
 2ce:	e1 f7       	brne	.-8      	; 0x2c8 <LCD_init+0x72>
 2d0:	00 c0       	rjmp	.+0      	; 0x2d2 <LCD_init+0x7c>
 2d2:	00 00       	nop
 2d4:	08 95       	ret

000002d6 <LCD_write_char>:
}

void LCD_write_char(uint8_t data)
{
	// Sending Data Mode
	RS(1);
 2d6:	9b b3       	in	r25, 0x1b	; 27
 2d8:	98 60       	ori	r25, 0x08	; 8
 2da:	9b bb       	out	0x1b, r25	; 27

	// Send Most Significant Nibble of Data
	D7(READBIT(data,7));
 2dc:	88 23       	and	r24, r24
 2de:	24 f0       	brlt	.+8      	; 0x2e8 <LCD_write_char+0x12>
 2e0:	9b b3       	in	r25, 0x1b	; 27
 2e2:	9f 77       	andi	r25, 0x7F	; 127
 2e4:	9b bb       	out	0x1b, r25	; 27
 2e6:	03 c0       	rjmp	.+6      	; 0x2ee <LCD_write_char+0x18>
 2e8:	9b b3       	in	r25, 0x1b	; 27
 2ea:	90 68       	ori	r25, 0x80	; 128
 2ec:	9b bb       	out	0x1b, r25	; 27
	D6(READBIT(data,6));
 2ee:	86 fd       	sbrc	r24, 6
 2f0:	04 c0       	rjmp	.+8      	; 0x2fa <LCD_write_char+0x24>
 2f2:	9b b3       	in	r25, 0x1b	; 27
 2f4:	9f 7b       	andi	r25, 0xBF	; 191
 2f6:	9b bb       	out	0x1b, r25	; 27
 2f8:	03 c0       	rjmp	.+6      	; 0x300 <LCD_write_char+0x2a>
 2fa:	9b b3       	in	r25, 0x1b	; 27
 2fc:	90 64       	ori	r25, 0x40	; 64
 2fe:	9b bb       	out	0x1b, r25	; 27
	D5(READBIT(data,5));
 300:	85 fd       	sbrc	r24, 5
 302:	04 c0       	rjmp	.+8      	; 0x30c <LCD_write_char+0x36>
 304:	9b b3       	in	r25, 0x1b	; 27
 306:	9f 7d       	andi	r25, 0xDF	; 223
 308:	9b bb       	out	0x1b, r25	; 27
 30a:	03 c0       	rjmp	.+6      	; 0x312 <LCD_write_char+0x3c>
 30c:	9b b3       	in	r25, 0x1b	; 27
 30e:	90 62       	ori	r25, 0x20	; 32
 310:	9b bb       	out	0x1b, r25	; 27
	D4(READBIT(data,4));
 312:	84 fd       	sbrc	r24, 4
 314:	04 c0       	rjmp	.+8      	; 0x31e <LCD_write_char+0x48>
 316:	9b b3       	in	r25, 0x1b	; 27
 318:	9f 7e       	andi	r25, 0xEF	; 239
 31a:	9b bb       	out	0x1b, r25	; 27
 31c:	03 c0       	rjmp	.+6      	; 0x324 <LCD_write_char+0x4e>
 31e:	9b b3       	in	r25, 0x1b	; 27
 320:	90 61       	ori	r25, 0x10	; 16
 322:	9b bb       	out	0x1b, r25	; 27
		
	TRIGGER_LCD();
 324:	9b b3       	in	r25, 0x1b	; 27
 326:	94 60       	ori	r25, 0x04	; 4
 328:	9b bb       	out	0x1b, r25	; 27
 32a:	ef e9       	ldi	r30, 0x9F	; 159
 32c:	ff e0       	ldi	r31, 0x0F	; 15
 32e:	31 97       	sbiw	r30, 0x01	; 1
 330:	f1 f7       	brne	.-4      	; 0x32e <LCD_write_char+0x58>
 332:	00 c0       	rjmp	.+0      	; 0x334 <LCD_write_char+0x5e>
 334:	00 00       	nop
 336:	9b b3       	in	r25, 0x1b	; 27
 338:	9b 7f       	andi	r25, 0xFB	; 251
 33a:	9b bb       	out	0x1b, r25	; 27
 33c:	ef e9       	ldi	r30, 0x9F	; 159
 33e:	ff e0       	ldi	r31, 0x0F	; 15
 340:	31 97       	sbiw	r30, 0x01	; 1
 342:	f1 f7       	brne	.-4      	; 0x340 <LCD_write_char+0x6a>
 344:	00 c0       	rjmp	.+0      	; 0x346 <LCD_write_char+0x70>
 346:	00 00       	nop

	// Send Least Significant Nibble of Data
	D7(READBIT(data,3));
 348:	83 fd       	sbrc	r24, 3
 34a:	04 c0       	rjmp	.+8      	; 0x354 <LCD_write_char+0x7e>
 34c:	9b b3       	in	r25, 0x1b	; 27
 34e:	9f 77       	andi	r25, 0x7F	; 127
 350:	9b bb       	out	0x1b, r25	; 27
 352:	03 c0       	rjmp	.+6      	; 0x35a <LCD_write_char+0x84>
 354:	9b b3       	in	r25, 0x1b	; 27
 356:	90 68       	ori	r25, 0x80	; 128
 358:	9b bb       	out	0x1b, r25	; 27
	D6(READBIT(data,2));
 35a:	82 fd       	sbrc	r24, 2
 35c:	04 c0       	rjmp	.+8      	; 0x366 <LCD_write_char+0x90>
 35e:	9b b3       	in	r25, 0x1b	; 27
 360:	9f 7b       	andi	r25, 0xBF	; 191
 362:	9b bb       	out	0x1b, r25	; 27
 364:	03 c0       	rjmp	.+6      	; 0x36c <LCD_write_char+0x96>
 366:	9b b3       	in	r25, 0x1b	; 27
 368:	90 64       	ori	r25, 0x40	; 64
 36a:	9b bb       	out	0x1b, r25	; 27
	D5(READBIT(data,1));
 36c:	81 fd       	sbrc	r24, 1
 36e:	04 c0       	rjmp	.+8      	; 0x378 <LCD_write_char+0xa2>
 370:	9b b3       	in	r25, 0x1b	; 27
 372:	9f 7d       	andi	r25, 0xDF	; 223
 374:	9b bb       	out	0x1b, r25	; 27
 376:	03 c0       	rjmp	.+6      	; 0x37e <LCD_write_char+0xa8>
 378:	9b b3       	in	r25, 0x1b	; 27
 37a:	90 62       	ori	r25, 0x20	; 32
 37c:	9b bb       	out	0x1b, r25	; 27
	D4(READBIT(data,0));
 37e:	80 fd       	sbrc	r24, 0
 380:	04 c0       	rjmp	.+8      	; 0x38a <LCD_write_char+0xb4>
 382:	8b b3       	in	r24, 0x1b	; 27
 384:	8f 7e       	andi	r24, 0xEF	; 239
 386:	8b bb       	out	0x1b, r24	; 27
 388:	03 c0       	rjmp	.+6      	; 0x390 <LCD_write_char+0xba>
 38a:	8b b3       	in	r24, 0x1b	; 27
 38c:	80 61       	ori	r24, 0x10	; 16
 38e:	8b bb       	out	0x1b, r24	; 27
		
	TRIGGER_LCD();
 390:	8b b3       	in	r24, 0x1b	; 27
 392:	84 60       	ori	r24, 0x04	; 4
 394:	8b bb       	out	0x1b, r24	; 27
 396:	8f e9       	ldi	r24, 0x9F	; 159
 398:	9f e0       	ldi	r25, 0x0F	; 15
 39a:	01 97       	sbiw	r24, 0x01	; 1
 39c:	f1 f7       	brne	.-4      	; 0x39a <LCD_write_char+0xc4>
 39e:	00 c0       	rjmp	.+0      	; 0x3a0 <LCD_write_char+0xca>
 3a0:	00 00       	nop
 3a2:	8b b3       	in	r24, 0x1b	; 27
 3a4:	8b 7f       	andi	r24, 0xFB	; 251
 3a6:	8b bb       	out	0x1b, r24	; 27
 3a8:	ef e9       	ldi	r30, 0x9F	; 159
 3aa:	ff e0       	ldi	r31, 0x0F	; 15
 3ac:	31 97       	sbiw	r30, 0x01	; 1
 3ae:	f1 f7       	brne	.-4      	; 0x3ac <LCD_write_char+0xd6>
 3b0:	00 c0       	rjmp	.+0      	; 0x3b2 <LCD_write_char+0xdc>
 3b2:	00 00       	nop
 3b4:	08 95       	ret

000003b6 <main>:
#include "headers/keypad.h"

int main(void)
{
	
	LCD_init();
 3b6:	0e 94 2b 01 	call	0x256	; 0x256 <LCD_init>
	keypad_init();
 3ba:	0e 94 41 00 	call	0x82	; 0x82 <keypad_init>
	
    while (1) 
    {
		int8_t key = keypad_read();
 3be:	0e 94 46 00 	call	0x8c	; 0x8c <keypad_read>
 3c2:	c8 2f       	mov	r28, r24
		
		if(key != -1)
 3c4:	8f 3f       	cpi	r24, 0xFF	; 255
 3c6:	d9 f3       	breq	.-10     	; 0x3be <main+0x8>
		{
			// Clear LCD display
			LCD_write_command(0x1);
 3c8:	81 e0       	ldi	r24, 0x01	; 1
 3ca:	0e 94 bb 00 	call	0x176	; 0x176 <LCD_write_command>
			LCD_write_char(key);
 3ce:	8c 2f       	mov	r24, r28
 3d0:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <LCD_write_char>
 3d4:	f4 cf       	rjmp	.-24     	; 0x3be <main+0x8>

000003d6 <_exit>:
 3d6:	f8 94       	cli

000003d8 <__stop_program>:
 3d8:	ff cf       	rjmp	.-2      	; 0x3d8 <__stop_program>
