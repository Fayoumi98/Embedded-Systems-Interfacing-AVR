
Section_6_ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003f4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000448  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000448  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000478  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000088  00000000  00000000  000004b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c8a  00000000  00000000  0000053c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000786  00000000  00000000  000011c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000824  00000000  00000000  0000194c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000f8  00000000  00000000  00002170  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003c4  00000000  00000000  00002268  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000577  00000000  00000000  0000262c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  00002ba3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 bd 01 	call	0x37a	; 0x37a <main>
  64:	0c 94 f8 01 	jmp	0x3f0	; 0x3f0 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <ADC_init>:


void ADC_init(void)
{
	// AVCC with external capacitor at AREF pin
	ADMUX |= 1 << REFS0;
  6c:	87 b1       	in	r24, 0x07	; 7
  6e:	80 64       	ori	r24, 0x40	; 64
  70:	87 b9       	out	0x07, r24	; 7
	// ADEN: ADC Enable  ADEN = 1
	// ADPS2:0: ADC Pre-scaler Select Bits (128)		ADPS0 =	1		ADPS1 =	1		ADPS2 = 1
	
	ADCSRA |= (1 << ADEN) | (1 << ADPS0) | (1 << ADPS1) | (1 << ADPS2);
  72:	86 b1       	in	r24, 0x06	; 6
  74:	87 68       	ori	r24, 0x87	; 135
  76:	86 b9       	out	0x06, r24	; 6
  78:	08 95       	ret

0000007a <ADC_read>:

uint16_t ADC_read(uint8_t channel)
{
	// channel select 
	// MUX4:0: Analog Channel and Gain Selection Bits
	ADMUX |= channel | (1 << REFS0);
  7a:	97 b1       	in	r25, 0x07	; 7
  7c:	89 2b       	or	r24, r25
  7e:	80 64       	ori	r24, 0x40	; 64
  80:	87 b9       	out	0x07, r24	; 7
	
	// Start conversion (ADSC: ADC Start Conversion)
	SETBIT(ADCSRA,ADSC);
  82:	86 b1       	in	r24, 0x06	; 6
  84:	80 64       	ori	r24, 0x40	; 64
  86:	86 b9       	out	0x06, r24	; 6
	
	// wait until ADC Start Conversion  is turned into 0
	while(READBIT(ADCSRA,ADSC) == 1){}
  88:	36 99       	sbic	0x06, 6	; 6
  8a:	fe cf       	rjmp	.-4      	; 0x88 <ADC_read+0xe>
	/*
	or :  wait until ADIF ADC Interrupt Flag  is turned into 1
	while(READBIT(ADCSRA,ADIF) == 0){}
	*/
	return ADC;
  8c:	84 b1       	in	r24, 0x04	; 4
  8e:	95 b1       	in	r25, 0x05	; 5
  90:	08 95       	ret

00000092 <LCD_write_command>:
	while(txt[i] != '\0')
	{
		LCD_write_char(txt[i]);
		i++;
	}
}
  92:	9b b3       	in	r25, 0x1b	; 27
  94:	97 7f       	andi	r25, 0xF7	; 247
  96:	9b bb       	out	0x1b, r25	; 27
  98:	88 23       	and	r24, r24
  9a:	24 f0       	brlt	.+8      	; 0xa4 <LCD_write_command+0x12>
  9c:	9b b3       	in	r25, 0x1b	; 27
  9e:	9f 77       	andi	r25, 0x7F	; 127
  a0:	9b bb       	out	0x1b, r25	; 27
  a2:	03 c0       	rjmp	.+6      	; 0xaa <LCD_write_command+0x18>
  a4:	9b b3       	in	r25, 0x1b	; 27
  a6:	90 68       	ori	r25, 0x80	; 128
  a8:	9b bb       	out	0x1b, r25	; 27
  aa:	86 fd       	sbrc	r24, 6
  ac:	04 c0       	rjmp	.+8      	; 0xb6 <LCD_write_command+0x24>
  ae:	9b b3       	in	r25, 0x1b	; 27
  b0:	9f 7b       	andi	r25, 0xBF	; 191
  b2:	9b bb       	out	0x1b, r25	; 27
  b4:	03 c0       	rjmp	.+6      	; 0xbc <LCD_write_command+0x2a>
  b6:	9b b3       	in	r25, 0x1b	; 27
  b8:	90 64       	ori	r25, 0x40	; 64
  ba:	9b bb       	out	0x1b, r25	; 27
  bc:	85 fd       	sbrc	r24, 5
  be:	04 c0       	rjmp	.+8      	; 0xc8 <LCD_write_command+0x36>
  c0:	9b b3       	in	r25, 0x1b	; 27
  c2:	9f 7d       	andi	r25, 0xDF	; 223
  c4:	9b bb       	out	0x1b, r25	; 27
  c6:	03 c0       	rjmp	.+6      	; 0xce <LCD_write_command+0x3c>
  c8:	9b b3       	in	r25, 0x1b	; 27
  ca:	90 62       	ori	r25, 0x20	; 32
  cc:	9b bb       	out	0x1b, r25	; 27
  ce:	84 fd       	sbrc	r24, 4
  d0:	04 c0       	rjmp	.+8      	; 0xda <LCD_write_command+0x48>
  d2:	9b b3       	in	r25, 0x1b	; 27
  d4:	9f 7e       	andi	r25, 0xEF	; 239
  d6:	9b bb       	out	0x1b, r25	; 27
  d8:	03 c0       	rjmp	.+6      	; 0xe0 <LCD_write_command+0x4e>
  da:	9b b3       	in	r25, 0x1b	; 27
  dc:	90 61       	ori	r25, 0x10	; 16
  de:	9b bb       	out	0x1b, r25	; 27
  e0:	9b b3       	in	r25, 0x1b	; 27
  e2:	94 60       	ori	r25, 0x04	; 4
  e4:	9b bb       	out	0x1b, r25	; 27
  e6:	ef e9       	ldi	r30, 0x9F	; 159
  e8:	ff e0       	ldi	r31, 0x0F	; 15
  ea:	31 97       	sbiw	r30, 0x01	; 1
  ec:	f1 f7       	brne	.-4      	; 0xea <LCD_write_command+0x58>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <LCD_write_command+0x5e>
  f0:	00 00       	nop
  f2:	9b b3       	in	r25, 0x1b	; 27
  f4:	9b 7f       	andi	r25, 0xFB	; 251
  f6:	9b bb       	out	0x1b, r25	; 27
  f8:	ef e9       	ldi	r30, 0x9F	; 159
  fa:	ff e0       	ldi	r31, 0x0F	; 15
  fc:	31 97       	sbiw	r30, 0x01	; 1
  fe:	f1 f7       	brne	.-4      	; 0xfc <LCD_write_command+0x6a>
 100:	00 c0       	rjmp	.+0      	; 0x102 <LCD_write_command+0x70>
 102:	00 00       	nop
 104:	83 fd       	sbrc	r24, 3
 106:	04 c0       	rjmp	.+8      	; 0x110 <LCD_write_command+0x7e>
 108:	9b b3       	in	r25, 0x1b	; 27
 10a:	9f 77       	andi	r25, 0x7F	; 127
 10c:	9b bb       	out	0x1b, r25	; 27
 10e:	03 c0       	rjmp	.+6      	; 0x116 <LCD_write_command+0x84>
 110:	9b b3       	in	r25, 0x1b	; 27
 112:	90 68       	ori	r25, 0x80	; 128
 114:	9b bb       	out	0x1b, r25	; 27
 116:	82 fd       	sbrc	r24, 2
 118:	04 c0       	rjmp	.+8      	; 0x122 <LCD_write_command+0x90>
 11a:	9b b3       	in	r25, 0x1b	; 27
 11c:	9f 7b       	andi	r25, 0xBF	; 191
 11e:	9b bb       	out	0x1b, r25	; 27
 120:	03 c0       	rjmp	.+6      	; 0x128 <LCD_write_command+0x96>
 122:	9b b3       	in	r25, 0x1b	; 27
 124:	90 64       	ori	r25, 0x40	; 64
 126:	9b bb       	out	0x1b, r25	; 27
 128:	81 fd       	sbrc	r24, 1
 12a:	04 c0       	rjmp	.+8      	; 0x134 <LCD_write_command+0xa2>
 12c:	9b b3       	in	r25, 0x1b	; 27
 12e:	9f 7d       	andi	r25, 0xDF	; 223
 130:	9b bb       	out	0x1b, r25	; 27
 132:	03 c0       	rjmp	.+6      	; 0x13a <LCD_write_command+0xa8>
 134:	9b b3       	in	r25, 0x1b	; 27
 136:	90 62       	ori	r25, 0x20	; 32
 138:	9b bb       	out	0x1b, r25	; 27
 13a:	80 fd       	sbrc	r24, 0
 13c:	04 c0       	rjmp	.+8      	; 0x146 <LCD_write_command+0xb4>
 13e:	8b b3       	in	r24, 0x1b	; 27
 140:	8f 7e       	andi	r24, 0xEF	; 239
 142:	8b bb       	out	0x1b, r24	; 27
 144:	03 c0       	rjmp	.+6      	; 0x14c <LCD_write_command+0xba>
 146:	8b b3       	in	r24, 0x1b	; 27
 148:	80 61       	ori	r24, 0x10	; 16
 14a:	8b bb       	out	0x1b, r24	; 27
 14c:	8b b3       	in	r24, 0x1b	; 27
 14e:	84 60       	ori	r24, 0x04	; 4
 150:	8b bb       	out	0x1b, r24	; 27
 152:	8f e9       	ldi	r24, 0x9F	; 159
 154:	9f e0       	ldi	r25, 0x0F	; 15
 156:	01 97       	sbiw	r24, 0x01	; 1
 158:	f1 f7       	brne	.-4      	; 0x156 <LCD_write_command+0xc4>
 15a:	00 c0       	rjmp	.+0      	; 0x15c <LCD_write_command+0xca>
 15c:	00 00       	nop
 15e:	8b b3       	in	r24, 0x1b	; 27
 160:	8b 7f       	andi	r24, 0xFB	; 251
 162:	8b bb       	out	0x1b, r24	; 27
 164:	ef e9       	ldi	r30, 0x9F	; 159
 166:	ff e0       	ldi	r31, 0x0F	; 15
 168:	31 97       	sbiw	r30, 0x01	; 1
 16a:	f1 f7       	brne	.-4      	; 0x168 <LCD_write_command+0xd6>
 16c:	00 c0       	rjmp	.+0      	; 0x16e <LCD_write_command+0xdc>
 16e:	00 00       	nop
 170:	08 95       	ret

00000172 <LCD_init>:
 172:	8a b3       	in	r24, 0x1a	; 26
 174:	8c 6f       	ori	r24, 0xFC	; 252
 176:	8a bb       	out	0x1a, r24	; 26
 178:	8b b3       	in	r24, 0x1b	; 27
 17a:	83 70       	andi	r24, 0x03	; 3
 17c:	8b bb       	out	0x1b, r24	; 27
 17e:	83 e0       	ldi	r24, 0x03	; 3
 180:	0e 94 49 00 	call	0x92	; 0x92 <LCD_write_command>
 184:	8f e7       	ldi	r24, 0x7F	; 127
 186:	9e e3       	ldi	r25, 0x3E	; 62
 188:	01 97       	sbiw	r24, 0x01	; 1
 18a:	f1 f7       	brne	.-4      	; 0x188 <LCD_init+0x16>
 18c:	00 c0       	rjmp	.+0      	; 0x18e <LCD_init+0x1c>
 18e:	00 00       	nop
 190:	83 e0       	ldi	r24, 0x03	; 3
 192:	0e 94 49 00 	call	0x92	; 0x92 <LCD_write_command>
 196:	8f e7       	ldi	r24, 0x7F	; 127
 198:	9e e3       	ldi	r25, 0x3E	; 62
 19a:	01 97       	sbiw	r24, 0x01	; 1
 19c:	f1 f7       	brne	.-4      	; 0x19a <LCD_init+0x28>
 19e:	00 c0       	rjmp	.+0      	; 0x1a0 <LCD_init+0x2e>
 1a0:	00 00       	nop
 1a2:	83 e0       	ldi	r24, 0x03	; 3
 1a4:	0e 94 49 00 	call	0x92	; 0x92 <LCD_write_command>
 1a8:	8f e7       	ldi	r24, 0x7F	; 127
 1aa:	9e e3       	ldi	r25, 0x3E	; 62
 1ac:	01 97       	sbiw	r24, 0x01	; 1
 1ae:	f1 f7       	brne	.-4      	; 0x1ac <LCD_init+0x3a>
 1b0:	00 c0       	rjmp	.+0      	; 0x1b2 <LCD_init+0x40>
 1b2:	00 00       	nop
 1b4:	82 e0       	ldi	r24, 0x02	; 2
 1b6:	0e 94 49 00 	call	0x92	; 0x92 <LCD_write_command>
 1ba:	88 e2       	ldi	r24, 0x28	; 40
 1bc:	0e 94 49 00 	call	0x92	; 0x92 <LCD_write_command>
 1c0:	88 e0       	ldi	r24, 0x08	; 8
 1c2:	0e 94 49 00 	call	0x92	; 0x92 <LCD_write_command>
 1c6:	81 e0       	ldi	r24, 0x01	; 1
 1c8:	0e 94 49 00 	call	0x92	; 0x92 <LCD_write_command>
 1cc:	86 e0       	ldi	r24, 0x06	; 6
 1ce:	0e 94 49 00 	call	0x92	; 0x92 <LCD_write_command>
 1d2:	81 e0       	ldi	r24, 0x01	; 1
 1d4:	0e 94 49 00 	call	0x92	; 0x92 <LCD_write_command>
 1d8:	8c e0       	ldi	r24, 0x0C	; 12
 1da:	0e 94 49 00 	call	0x92	; 0x92 <LCD_write_command>
 1de:	9f ef       	ldi	r25, 0xFF	; 255
 1e0:	29 ef       	ldi	r18, 0xF9	; 249
 1e2:	80 e0       	ldi	r24, 0x00	; 0
 1e4:	91 50       	subi	r25, 0x01	; 1
 1e6:	20 40       	sbci	r18, 0x00	; 0
 1e8:	80 40       	sbci	r24, 0x00	; 0
 1ea:	e1 f7       	brne	.-8      	; 0x1e4 <LCD_init+0x72>
 1ec:	00 c0       	rjmp	.+0      	; 0x1ee <LCD_init+0x7c>
 1ee:	00 00       	nop
 1f0:	08 95       	ret

000001f2 <LCD_write_char>:
 1f2:	9b b3       	in	r25, 0x1b	; 27
 1f4:	98 60       	ori	r25, 0x08	; 8
 1f6:	9b bb       	out	0x1b, r25	; 27
 1f8:	88 23       	and	r24, r24
 1fa:	24 f0       	brlt	.+8      	; 0x204 <LCD_write_char+0x12>
 1fc:	9b b3       	in	r25, 0x1b	; 27
 1fe:	9f 77       	andi	r25, 0x7F	; 127
 200:	9b bb       	out	0x1b, r25	; 27
 202:	03 c0       	rjmp	.+6      	; 0x20a <LCD_write_char+0x18>
 204:	9b b3       	in	r25, 0x1b	; 27
 206:	90 68       	ori	r25, 0x80	; 128
 208:	9b bb       	out	0x1b, r25	; 27
 20a:	86 fd       	sbrc	r24, 6
 20c:	04 c0       	rjmp	.+8      	; 0x216 <LCD_write_char+0x24>
 20e:	9b b3       	in	r25, 0x1b	; 27
 210:	9f 7b       	andi	r25, 0xBF	; 191
 212:	9b bb       	out	0x1b, r25	; 27
 214:	03 c0       	rjmp	.+6      	; 0x21c <LCD_write_char+0x2a>
 216:	9b b3       	in	r25, 0x1b	; 27
 218:	90 64       	ori	r25, 0x40	; 64
 21a:	9b bb       	out	0x1b, r25	; 27
 21c:	85 fd       	sbrc	r24, 5
 21e:	04 c0       	rjmp	.+8      	; 0x228 <LCD_write_char+0x36>
 220:	9b b3       	in	r25, 0x1b	; 27
 222:	9f 7d       	andi	r25, 0xDF	; 223
 224:	9b bb       	out	0x1b, r25	; 27
 226:	03 c0       	rjmp	.+6      	; 0x22e <LCD_write_char+0x3c>
 228:	9b b3       	in	r25, 0x1b	; 27
 22a:	90 62       	ori	r25, 0x20	; 32
 22c:	9b bb       	out	0x1b, r25	; 27
 22e:	84 fd       	sbrc	r24, 4
 230:	04 c0       	rjmp	.+8      	; 0x23a <LCD_write_char+0x48>
 232:	9b b3       	in	r25, 0x1b	; 27
 234:	9f 7e       	andi	r25, 0xEF	; 239
 236:	9b bb       	out	0x1b, r25	; 27
 238:	03 c0       	rjmp	.+6      	; 0x240 <LCD_write_char+0x4e>
 23a:	9b b3       	in	r25, 0x1b	; 27
 23c:	90 61       	ori	r25, 0x10	; 16
 23e:	9b bb       	out	0x1b, r25	; 27
 240:	9b b3       	in	r25, 0x1b	; 27
 242:	94 60       	ori	r25, 0x04	; 4
 244:	9b bb       	out	0x1b, r25	; 27
 246:	ef e9       	ldi	r30, 0x9F	; 159
 248:	ff e0       	ldi	r31, 0x0F	; 15
 24a:	31 97       	sbiw	r30, 0x01	; 1
 24c:	f1 f7       	brne	.-4      	; 0x24a <LCD_write_char+0x58>
 24e:	00 c0       	rjmp	.+0      	; 0x250 <LCD_write_char+0x5e>
 250:	00 00       	nop
 252:	9b b3       	in	r25, 0x1b	; 27
 254:	9b 7f       	andi	r25, 0xFB	; 251
 256:	9b bb       	out	0x1b, r25	; 27
 258:	ef e9       	ldi	r30, 0x9F	; 159
 25a:	ff e0       	ldi	r31, 0x0F	; 15
 25c:	31 97       	sbiw	r30, 0x01	; 1
 25e:	f1 f7       	brne	.-4      	; 0x25c <LCD_write_char+0x6a>
 260:	00 c0       	rjmp	.+0      	; 0x262 <LCD_write_char+0x70>
 262:	00 00       	nop
 264:	83 fd       	sbrc	r24, 3
 266:	04 c0       	rjmp	.+8      	; 0x270 <LCD_write_char+0x7e>
 268:	9b b3       	in	r25, 0x1b	; 27
 26a:	9f 77       	andi	r25, 0x7F	; 127
 26c:	9b bb       	out	0x1b, r25	; 27
 26e:	03 c0       	rjmp	.+6      	; 0x276 <LCD_write_char+0x84>
 270:	9b b3       	in	r25, 0x1b	; 27
 272:	90 68       	ori	r25, 0x80	; 128
 274:	9b bb       	out	0x1b, r25	; 27
 276:	82 fd       	sbrc	r24, 2
 278:	04 c0       	rjmp	.+8      	; 0x282 <LCD_write_char+0x90>
 27a:	9b b3       	in	r25, 0x1b	; 27
 27c:	9f 7b       	andi	r25, 0xBF	; 191
 27e:	9b bb       	out	0x1b, r25	; 27
 280:	03 c0       	rjmp	.+6      	; 0x288 <LCD_write_char+0x96>
 282:	9b b3       	in	r25, 0x1b	; 27
 284:	90 64       	ori	r25, 0x40	; 64
 286:	9b bb       	out	0x1b, r25	; 27
 288:	81 fd       	sbrc	r24, 1
 28a:	04 c0       	rjmp	.+8      	; 0x294 <LCD_write_char+0xa2>
 28c:	9b b3       	in	r25, 0x1b	; 27
 28e:	9f 7d       	andi	r25, 0xDF	; 223
 290:	9b bb       	out	0x1b, r25	; 27
 292:	03 c0       	rjmp	.+6      	; 0x29a <LCD_write_char+0xa8>
 294:	9b b3       	in	r25, 0x1b	; 27
 296:	90 62       	ori	r25, 0x20	; 32
 298:	9b bb       	out	0x1b, r25	; 27
 29a:	80 fd       	sbrc	r24, 0
 29c:	04 c0       	rjmp	.+8      	; 0x2a6 <LCD_write_char+0xb4>
 29e:	8b b3       	in	r24, 0x1b	; 27
 2a0:	8f 7e       	andi	r24, 0xEF	; 239
 2a2:	8b bb       	out	0x1b, r24	; 27
 2a4:	03 c0       	rjmp	.+6      	; 0x2ac <LCD_write_char+0xba>
 2a6:	8b b3       	in	r24, 0x1b	; 27
 2a8:	80 61       	ori	r24, 0x10	; 16
 2aa:	8b bb       	out	0x1b, r24	; 27
 2ac:	8b b3       	in	r24, 0x1b	; 27
 2ae:	84 60       	ori	r24, 0x04	; 4
 2b0:	8b bb       	out	0x1b, r24	; 27
 2b2:	8f e9       	ldi	r24, 0x9F	; 159
 2b4:	9f e0       	ldi	r25, 0x0F	; 15
 2b6:	01 97       	sbiw	r24, 0x01	; 1
 2b8:	f1 f7       	brne	.-4      	; 0x2b6 <LCD_write_char+0xc4>
 2ba:	00 c0       	rjmp	.+0      	; 0x2bc <LCD_write_char+0xca>
 2bc:	00 00       	nop
 2be:	8b b3       	in	r24, 0x1b	; 27
 2c0:	8b 7f       	andi	r24, 0xFB	; 251
 2c2:	8b bb       	out	0x1b, r24	; 27
 2c4:	ef e9       	ldi	r30, 0x9F	; 159
 2c6:	ff e0       	ldi	r31, 0x0F	; 15
 2c8:	31 97       	sbiw	r30, 0x01	; 1
 2ca:	f1 f7       	brne	.-4      	; 0x2c8 <LCD_write_char+0xd6>
 2cc:	00 c0       	rjmp	.+0      	; 0x2ce <LCD_write_char+0xdc>
 2ce:	00 00       	nop
 2d0:	08 95       	ret

000002d2 <LCD_write_num>:

void LCD_write_num(uint32_t num)
{
 2d2:	cf 92       	push	r12
 2d4:	df 92       	push	r13
 2d6:	ef 92       	push	r14
 2d8:	ff 92       	push	r15
 2da:	1f 93       	push	r17
 2dc:	cf 93       	push	r28
 2de:	df 93       	push	r29
 2e0:	cd b7       	in	r28, 0x3d	; 61
 2e2:	de b7       	in	r29, 0x3e	; 62
 2e4:	2a 97       	sbiw	r28, 0x0a	; 10
 2e6:	0f b6       	in	r0, 0x3f	; 63
 2e8:	f8 94       	cli
 2ea:	de bf       	out	0x3e, r29	; 62
 2ec:	0f be       	out	0x3f, r0	; 63
 2ee:	cd bf       	out	0x3d, r28	; 61
 2f0:	6b 01       	movw	r12, r22
 2f2:	7c 01       	movw	r14, r24
    0
*/
	int8_t i = 0;
	uint8_t num_arr[10];
	
	if(num == 0) LCD_write_char('0');
 2f4:	67 2b       	or	r22, r23
 2f6:	68 2b       	or	r22, r24
 2f8:	69 2b       	or	r22, r25
 2fa:	19 f4       	brne	.+6      	; 0x302 <LCD_write_num+0x30>
 2fc:	80 e3       	ldi	r24, 0x30	; 48
 2fe:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <LCD_write_char>
		i++;
	}
}

void LCD_write_num(uint32_t num)
{
 302:	10 e0       	ldi	r17, 0x00	; 0
 304:	17 c0       	rjmp	.+46     	; 0x334 <LCD_write_num+0x62>
	if(num == 0) LCD_write_char('0');
	
	for(i = 0; num != 0 ;i++)
	{
		// + 48  to convert decimal number into ASCII
		num_arr[i] = num % 10 + 48;
 306:	c7 01       	movw	r24, r14
 308:	b6 01       	movw	r22, r12
 30a:	2a e0       	ldi	r18, 0x0A	; 10
 30c:	30 e0       	ldi	r19, 0x00	; 0
 30e:	40 e0       	ldi	r20, 0x00	; 0
 310:	50 e0       	ldi	r21, 0x00	; 0
 312:	0e 94 d6 01 	call	0x3ac	; 0x3ac <__udivmodsi4>
 316:	e1 e0       	ldi	r30, 0x01	; 1
 318:	f0 e0       	ldi	r31, 0x00	; 0
 31a:	ec 0f       	add	r30, r28
 31c:	fd 1f       	adc	r31, r29
 31e:	e1 0f       	add	r30, r17
 320:	f1 1d       	adc	r31, r1
 322:	17 fd       	sbrc	r17, 7
 324:	fa 95       	dec	r31
 326:	60 5d       	subi	r22, 0xD0	; 208
 328:	60 83       	st	Z, r22
		num /= 10;
 32a:	c2 2e       	mov	r12, r18
 32c:	d3 2e       	mov	r13, r19
 32e:	e4 2e       	mov	r14, r20
 330:	f5 2e       	mov	r15, r21
	int8_t i = 0;
	uint8_t num_arr[10];
	
	if(num == 0) LCD_write_char('0');
	
	for(i = 0; num != 0 ;i++)
 332:	1f 5f       	subi	r17, 0xFF	; 255
 334:	c1 14       	cp	r12, r1
 336:	d1 04       	cpc	r13, r1
 338:	e1 04       	cpc	r14, r1
 33a:	f1 04       	cpc	r15, r1
 33c:	21 f7       	brne	.-56     	; 0x306 <LCD_write_num+0x34>
		// + 48  to convert decimal number into ASCII
		num_arr[i] = num % 10 + 48;
		num /= 10;
	}
	
	i--;
 33e:	11 50       	subi	r17, 0x01	; 1
	while (i >= 0)
 340:	0c c0       	rjmp	.+24     	; 0x35a <LCD_write_num+0x88>
	{
		LCD_write_char(num_arr[i]);
 342:	e1 e0       	ldi	r30, 0x01	; 1
 344:	f0 e0       	ldi	r31, 0x00	; 0
 346:	ec 0f       	add	r30, r28
 348:	fd 1f       	adc	r31, r29
 34a:	e1 0f       	add	r30, r17
 34c:	f1 1d       	adc	r31, r1
 34e:	17 fd       	sbrc	r17, 7
 350:	fa 95       	dec	r31
 352:	80 81       	ld	r24, Z
 354:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <LCD_write_char>
		i--;
 358:	11 50       	subi	r17, 0x01	; 1
		num_arr[i] = num % 10 + 48;
		num /= 10;
	}
	
	i--;
	while (i >= 0)
 35a:	11 23       	and	r17, r17
 35c:	94 f7       	brge	.-28     	; 0x342 <LCD_write_num+0x70>
	{
		LCD_write_char(num_arr[i]);
		i--;
	}
 35e:	2a 96       	adiw	r28, 0x0a	; 10
 360:	0f b6       	in	r0, 0x3f	; 63
 362:	f8 94       	cli
 364:	de bf       	out	0x3e, r29	; 62
 366:	0f be       	out	0x3f, r0	; 63
 368:	cd bf       	out	0x3d, r28	; 61
 36a:	df 91       	pop	r29
 36c:	cf 91       	pop	r28
 36e:	1f 91       	pop	r17
 370:	ff 90       	pop	r15
 372:	ef 90       	pop	r14
 374:	df 90       	pop	r13
 376:	cf 90       	pop	r12
 378:	08 95       	ret

0000037a <main>:


int main(void)
{	
	// initialize ADC
    ADC_init();
 37a:	0e 94 36 00 	call	0x6c	; 0x6c <ADC_init>
	
	// initialize LCD
	LCD_init();
 37e:	0e 94 b9 00 	call	0x172	; 0x172 <LCD_init>
	
	while (1) 
    {
		LCD_write_command(0x1);
 382:	81 e0       	ldi	r24, 0x01	; 1
 384:	0e 94 49 00 	call	0x92	; 0x92 <LCD_write_command>
		LCD_write_num(ADC_read(0));
 388:	80 e0       	ldi	r24, 0x00	; 0
 38a:	0e 94 3d 00 	call	0x7a	; 0x7a <ADC_read>
 38e:	bc 01       	movw	r22, r24
 390:	80 e0       	ldi	r24, 0x00	; 0
 392:	90 e0       	ldi	r25, 0x00	; 0
 394:	0e 94 69 01 	call	0x2d2	; 0x2d2 <LCD_write_num>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 398:	2f ef       	ldi	r18, 0xFF	; 255
 39a:	83 ed       	ldi	r24, 0xD3	; 211
 39c:	90 e3       	ldi	r25, 0x30	; 48
 39e:	21 50       	subi	r18, 0x01	; 1
 3a0:	80 40       	sbci	r24, 0x00	; 0
 3a2:	90 40       	sbci	r25, 0x00	; 0
 3a4:	e1 f7       	brne	.-8      	; 0x39e <main+0x24>
 3a6:	00 c0       	rjmp	.+0      	; 0x3a8 <main+0x2e>
 3a8:	00 00       	nop
 3aa:	eb cf       	rjmp	.-42     	; 0x382 <main+0x8>

000003ac <__udivmodsi4>:
 3ac:	a1 e2       	ldi	r26, 0x21	; 33
 3ae:	1a 2e       	mov	r1, r26
 3b0:	aa 1b       	sub	r26, r26
 3b2:	bb 1b       	sub	r27, r27
 3b4:	fd 01       	movw	r30, r26
 3b6:	0d c0       	rjmp	.+26     	; 0x3d2 <__udivmodsi4_ep>

000003b8 <__udivmodsi4_loop>:
 3b8:	aa 1f       	adc	r26, r26
 3ba:	bb 1f       	adc	r27, r27
 3bc:	ee 1f       	adc	r30, r30
 3be:	ff 1f       	adc	r31, r31
 3c0:	a2 17       	cp	r26, r18
 3c2:	b3 07       	cpc	r27, r19
 3c4:	e4 07       	cpc	r30, r20
 3c6:	f5 07       	cpc	r31, r21
 3c8:	20 f0       	brcs	.+8      	; 0x3d2 <__udivmodsi4_ep>
 3ca:	a2 1b       	sub	r26, r18
 3cc:	b3 0b       	sbc	r27, r19
 3ce:	e4 0b       	sbc	r30, r20
 3d0:	f5 0b       	sbc	r31, r21

000003d2 <__udivmodsi4_ep>:
 3d2:	66 1f       	adc	r22, r22
 3d4:	77 1f       	adc	r23, r23
 3d6:	88 1f       	adc	r24, r24
 3d8:	99 1f       	adc	r25, r25
 3da:	1a 94       	dec	r1
 3dc:	69 f7       	brne	.-38     	; 0x3b8 <__udivmodsi4_loop>
 3de:	60 95       	com	r22
 3e0:	70 95       	com	r23
 3e2:	80 95       	com	r24
 3e4:	90 95       	com	r25
 3e6:	9b 01       	movw	r18, r22
 3e8:	ac 01       	movw	r20, r24
 3ea:	bd 01       	movw	r22, r26
 3ec:	cf 01       	movw	r24, r30
 3ee:	08 95       	ret

000003f0 <_exit>:
 3f0:	f8 94       	cli

000003f2 <__stop_program>:
 3f2:	ff cf       	rjmp	.-2      	; 0x3f2 <__stop_program>
