
Section_8_I2C_Slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003fa  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000044e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000044e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000480  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b8  00000000  00000000  000004bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ce9  00000000  00000000  00000574  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000774  00000000  00000000  0000125d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000008a3  00000000  00000000  000019d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000158  00000000  00000000  00002274  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000438  00000000  00000000  000023cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000005e3  00000000  00000000  00002804  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000088  00000000  00000000  00002de7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 c3 01 	call	0x386	; 0x386 <main>
  64:	0c 94 fb 01 	jmp	0x3f6	; 0x3f6 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <I2C_slave_Init>:


void I2C_slave_Init(uint8_t My_Add)
{
	// TWI (Slave) Address	Register – TWAR
	TWAR = My_Add << 1;
  6c:	88 0f       	add	r24, r24
  6e:	82 b9       	out	0x02, r24	; 2
	// Set Address	Register bit 0 = 1 (to enable this slave so the master to the same data at the same time [general call] )
	SETBIT(TWAR,TWGCE);
  70:	82 b1       	in	r24, 0x02	; 2
  72:	81 60       	ori	r24, 0x01	; 1
  74:	82 b9       	out	0x02, r24	; 2
  76:	08 95       	ret

00000078 <I2C_slave_available>:
	In TWI Control Register – TWCR:
		- Set TWEN : TWI Enable Bit
		- Set TWINT : TWI Interrupt Flag (to reset it to 0)
		- Set TWEA: TWI Enable Acknowledge Bit
	*/
	TWCR = (1 << TWEA) | (1 << TWINT) | (1 << TWEN) ;
  78:	84 ec       	ldi	r24, 0xC4	; 196
  7a:	86 bf       	out	0x36, r24	; 54
	
	// Wait until slave address and Write are received from master
	while(READBIT(TWCR,TWINT) == 0);
  7c:	06 b6       	in	r0, 0x36	; 54
  7e:	07 fe       	sbrs	r0, 7
  80:	fd cf       	rjmp	.-6      	; 0x7c <I2C_slave_available+0x4>
	
	// Own SLA+W has been received + ACK has been returned (Table 76)
	if(TWSR == 0x60)
  82:	81 b1       	in	r24, 0x01	; 1
  84:	80 36       	cpi	r24, 0x60	; 96
  86:	11 f4       	brne	.+4      	; 0x8c <I2C_slave_available+0x14>
	{
		// data ready to transfer
		return 1 ;
  88:	81 e0       	ldi	r24, 0x01	; 1
  8a:	08 95       	ret
	}
	else
	{
		// data not ready to transfer
		return 0 ;
  8c:	80 e0       	ldi	r24, 0x00	; 0
	}
}
  8e:	08 95       	ret

00000090 <I2C_slave_read>:
	In TWI Control Register – TWCR:
		- Set TWEN : TWI Enable Bit
		- Set TWINT : TWI Interrupt Flag (to reset it to 0)
		- Set TWEA: TWI Enable Acknowledge Bit
	*/
	TWCR = (1 << TWEA) | (1 << TWINT) | (1 << TWEN) ;
  90:	84 ec       	ldi	r24, 0xC4	; 196
  92:	86 bf       	out	0x36, r24	; 54
	
	// Wait until slave address and Write are received from master
	while(READBIT(TWCR,TWINT) == 0);
  94:	06 b6       	in	r0, 0x36	; 54
  96:	07 fe       	sbrs	r0, 7
  98:	fd cf       	rjmp	.-6      	; 0x94 <I2C_slave_read+0x4>
	
	// when data ready return it
	return TWDR;
  9a:	83 b1       	in	r24, 0x03	; 3
  9c:	08 95       	ret

0000009e <LCD_write_command>:
	while(txt[i] != '\0')
	{
		LCD_write_char(txt[i]);
		i++;
	}
}
  9e:	9b b3       	in	r25, 0x1b	; 27
  a0:	97 7f       	andi	r25, 0xF7	; 247
  a2:	9b bb       	out	0x1b, r25	; 27
  a4:	88 23       	and	r24, r24
  a6:	24 f0       	brlt	.+8      	; 0xb0 <LCD_write_command+0x12>
  a8:	9b b3       	in	r25, 0x1b	; 27
  aa:	9f 77       	andi	r25, 0x7F	; 127
  ac:	9b bb       	out	0x1b, r25	; 27
  ae:	03 c0       	rjmp	.+6      	; 0xb6 <LCD_write_command+0x18>
  b0:	9b b3       	in	r25, 0x1b	; 27
  b2:	90 68       	ori	r25, 0x80	; 128
  b4:	9b bb       	out	0x1b, r25	; 27
  b6:	86 fd       	sbrc	r24, 6
  b8:	04 c0       	rjmp	.+8      	; 0xc2 <LCD_write_command+0x24>
  ba:	9b b3       	in	r25, 0x1b	; 27
  bc:	9f 7b       	andi	r25, 0xBF	; 191
  be:	9b bb       	out	0x1b, r25	; 27
  c0:	03 c0       	rjmp	.+6      	; 0xc8 <LCD_write_command+0x2a>
  c2:	9b b3       	in	r25, 0x1b	; 27
  c4:	90 64       	ori	r25, 0x40	; 64
  c6:	9b bb       	out	0x1b, r25	; 27
  c8:	85 fd       	sbrc	r24, 5
  ca:	04 c0       	rjmp	.+8      	; 0xd4 <LCD_write_command+0x36>
  cc:	9b b3       	in	r25, 0x1b	; 27
  ce:	9f 7d       	andi	r25, 0xDF	; 223
  d0:	9b bb       	out	0x1b, r25	; 27
  d2:	03 c0       	rjmp	.+6      	; 0xda <LCD_write_command+0x3c>
  d4:	9b b3       	in	r25, 0x1b	; 27
  d6:	90 62       	ori	r25, 0x20	; 32
  d8:	9b bb       	out	0x1b, r25	; 27
  da:	84 fd       	sbrc	r24, 4
  dc:	04 c0       	rjmp	.+8      	; 0xe6 <LCD_write_command+0x48>
  de:	9b b3       	in	r25, 0x1b	; 27
  e0:	9f 7e       	andi	r25, 0xEF	; 239
  e2:	9b bb       	out	0x1b, r25	; 27
  e4:	03 c0       	rjmp	.+6      	; 0xec <LCD_write_command+0x4e>
  e6:	9b b3       	in	r25, 0x1b	; 27
  e8:	90 61       	ori	r25, 0x10	; 16
  ea:	9b bb       	out	0x1b, r25	; 27
  ec:	9b b3       	in	r25, 0x1b	; 27
  ee:	94 60       	ori	r25, 0x04	; 4
  f0:	9b bb       	out	0x1b, r25	; 27
  f2:	ef e9       	ldi	r30, 0x9F	; 159
  f4:	ff e0       	ldi	r31, 0x0F	; 15
  f6:	31 97       	sbiw	r30, 0x01	; 1
  f8:	f1 f7       	brne	.-4      	; 0xf6 <LCD_write_command+0x58>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <LCD_write_command+0x5e>
  fc:	00 00       	nop
  fe:	9b b3       	in	r25, 0x1b	; 27
 100:	9b 7f       	andi	r25, 0xFB	; 251
 102:	9b bb       	out	0x1b, r25	; 27
 104:	ef e9       	ldi	r30, 0x9F	; 159
 106:	ff e0       	ldi	r31, 0x0F	; 15
 108:	31 97       	sbiw	r30, 0x01	; 1
 10a:	f1 f7       	brne	.-4      	; 0x108 <LCD_write_command+0x6a>
 10c:	00 c0       	rjmp	.+0      	; 0x10e <LCD_write_command+0x70>
 10e:	00 00       	nop
 110:	83 fd       	sbrc	r24, 3
 112:	04 c0       	rjmp	.+8      	; 0x11c <LCD_write_command+0x7e>
 114:	9b b3       	in	r25, 0x1b	; 27
 116:	9f 77       	andi	r25, 0x7F	; 127
 118:	9b bb       	out	0x1b, r25	; 27
 11a:	03 c0       	rjmp	.+6      	; 0x122 <LCD_write_command+0x84>
 11c:	9b b3       	in	r25, 0x1b	; 27
 11e:	90 68       	ori	r25, 0x80	; 128
 120:	9b bb       	out	0x1b, r25	; 27
 122:	82 fd       	sbrc	r24, 2
 124:	04 c0       	rjmp	.+8      	; 0x12e <LCD_write_command+0x90>
 126:	9b b3       	in	r25, 0x1b	; 27
 128:	9f 7b       	andi	r25, 0xBF	; 191
 12a:	9b bb       	out	0x1b, r25	; 27
 12c:	03 c0       	rjmp	.+6      	; 0x134 <LCD_write_command+0x96>
 12e:	9b b3       	in	r25, 0x1b	; 27
 130:	90 64       	ori	r25, 0x40	; 64
 132:	9b bb       	out	0x1b, r25	; 27
 134:	81 fd       	sbrc	r24, 1
 136:	04 c0       	rjmp	.+8      	; 0x140 <LCD_write_command+0xa2>
 138:	9b b3       	in	r25, 0x1b	; 27
 13a:	9f 7d       	andi	r25, 0xDF	; 223
 13c:	9b bb       	out	0x1b, r25	; 27
 13e:	03 c0       	rjmp	.+6      	; 0x146 <LCD_write_command+0xa8>
 140:	9b b3       	in	r25, 0x1b	; 27
 142:	90 62       	ori	r25, 0x20	; 32
 144:	9b bb       	out	0x1b, r25	; 27
 146:	80 fd       	sbrc	r24, 0
 148:	04 c0       	rjmp	.+8      	; 0x152 <LCD_write_command+0xb4>
 14a:	8b b3       	in	r24, 0x1b	; 27
 14c:	8f 7e       	andi	r24, 0xEF	; 239
 14e:	8b bb       	out	0x1b, r24	; 27
 150:	03 c0       	rjmp	.+6      	; 0x158 <LCD_write_command+0xba>
 152:	8b b3       	in	r24, 0x1b	; 27
 154:	80 61       	ori	r24, 0x10	; 16
 156:	8b bb       	out	0x1b, r24	; 27
 158:	8b b3       	in	r24, 0x1b	; 27
 15a:	84 60       	ori	r24, 0x04	; 4
 15c:	8b bb       	out	0x1b, r24	; 27
 15e:	8f e9       	ldi	r24, 0x9F	; 159
 160:	9f e0       	ldi	r25, 0x0F	; 15
 162:	01 97       	sbiw	r24, 0x01	; 1
 164:	f1 f7       	brne	.-4      	; 0x162 <LCD_write_command+0xc4>
 166:	00 c0       	rjmp	.+0      	; 0x168 <LCD_write_command+0xca>
 168:	00 00       	nop
 16a:	8b b3       	in	r24, 0x1b	; 27
 16c:	8b 7f       	andi	r24, 0xFB	; 251
 16e:	8b bb       	out	0x1b, r24	; 27
 170:	ef e9       	ldi	r30, 0x9F	; 159
 172:	ff e0       	ldi	r31, 0x0F	; 15
 174:	31 97       	sbiw	r30, 0x01	; 1
 176:	f1 f7       	brne	.-4      	; 0x174 <LCD_write_command+0xd6>
 178:	00 c0       	rjmp	.+0      	; 0x17a <LCD_write_command+0xdc>
 17a:	00 00       	nop
 17c:	08 95       	ret

0000017e <LCD_init>:
 17e:	8a b3       	in	r24, 0x1a	; 26
 180:	8c 6f       	ori	r24, 0xFC	; 252
 182:	8a bb       	out	0x1a, r24	; 26
 184:	8b b3       	in	r24, 0x1b	; 27
 186:	83 70       	andi	r24, 0x03	; 3
 188:	8b bb       	out	0x1b, r24	; 27
 18a:	83 e0       	ldi	r24, 0x03	; 3
 18c:	0e 94 4f 00 	call	0x9e	; 0x9e <LCD_write_command>
 190:	8f e7       	ldi	r24, 0x7F	; 127
 192:	9e e3       	ldi	r25, 0x3E	; 62
 194:	01 97       	sbiw	r24, 0x01	; 1
 196:	f1 f7       	brne	.-4      	; 0x194 <LCD_init+0x16>
 198:	00 c0       	rjmp	.+0      	; 0x19a <LCD_init+0x1c>
 19a:	00 00       	nop
 19c:	83 e0       	ldi	r24, 0x03	; 3
 19e:	0e 94 4f 00 	call	0x9e	; 0x9e <LCD_write_command>
 1a2:	8f e7       	ldi	r24, 0x7F	; 127
 1a4:	9e e3       	ldi	r25, 0x3E	; 62
 1a6:	01 97       	sbiw	r24, 0x01	; 1
 1a8:	f1 f7       	brne	.-4      	; 0x1a6 <LCD_init+0x28>
 1aa:	00 c0       	rjmp	.+0      	; 0x1ac <LCD_init+0x2e>
 1ac:	00 00       	nop
 1ae:	83 e0       	ldi	r24, 0x03	; 3
 1b0:	0e 94 4f 00 	call	0x9e	; 0x9e <LCD_write_command>
 1b4:	8f e7       	ldi	r24, 0x7F	; 127
 1b6:	9e e3       	ldi	r25, 0x3E	; 62
 1b8:	01 97       	sbiw	r24, 0x01	; 1
 1ba:	f1 f7       	brne	.-4      	; 0x1b8 <LCD_init+0x3a>
 1bc:	00 c0       	rjmp	.+0      	; 0x1be <LCD_init+0x40>
 1be:	00 00       	nop
 1c0:	82 e0       	ldi	r24, 0x02	; 2
 1c2:	0e 94 4f 00 	call	0x9e	; 0x9e <LCD_write_command>
 1c6:	88 e2       	ldi	r24, 0x28	; 40
 1c8:	0e 94 4f 00 	call	0x9e	; 0x9e <LCD_write_command>
 1cc:	88 e0       	ldi	r24, 0x08	; 8
 1ce:	0e 94 4f 00 	call	0x9e	; 0x9e <LCD_write_command>
 1d2:	81 e0       	ldi	r24, 0x01	; 1
 1d4:	0e 94 4f 00 	call	0x9e	; 0x9e <LCD_write_command>
 1d8:	86 e0       	ldi	r24, 0x06	; 6
 1da:	0e 94 4f 00 	call	0x9e	; 0x9e <LCD_write_command>
 1de:	81 e0       	ldi	r24, 0x01	; 1
 1e0:	0e 94 4f 00 	call	0x9e	; 0x9e <LCD_write_command>
 1e4:	8c e0       	ldi	r24, 0x0C	; 12
 1e6:	0e 94 4f 00 	call	0x9e	; 0x9e <LCD_write_command>
 1ea:	9f ef       	ldi	r25, 0xFF	; 255
 1ec:	29 ef       	ldi	r18, 0xF9	; 249
 1ee:	80 e0       	ldi	r24, 0x00	; 0
 1f0:	91 50       	subi	r25, 0x01	; 1
 1f2:	20 40       	sbci	r18, 0x00	; 0
 1f4:	80 40       	sbci	r24, 0x00	; 0
 1f6:	e1 f7       	brne	.-8      	; 0x1f0 <LCD_init+0x72>
 1f8:	00 c0       	rjmp	.+0      	; 0x1fa <LCD_init+0x7c>
 1fa:	00 00       	nop
 1fc:	08 95       	ret

000001fe <LCD_write_char>:
 1fe:	9b b3       	in	r25, 0x1b	; 27
 200:	98 60       	ori	r25, 0x08	; 8
 202:	9b bb       	out	0x1b, r25	; 27
 204:	88 23       	and	r24, r24
 206:	24 f0       	brlt	.+8      	; 0x210 <LCD_write_char+0x12>
 208:	9b b3       	in	r25, 0x1b	; 27
 20a:	9f 77       	andi	r25, 0x7F	; 127
 20c:	9b bb       	out	0x1b, r25	; 27
 20e:	03 c0       	rjmp	.+6      	; 0x216 <LCD_write_char+0x18>
 210:	9b b3       	in	r25, 0x1b	; 27
 212:	90 68       	ori	r25, 0x80	; 128
 214:	9b bb       	out	0x1b, r25	; 27
 216:	86 fd       	sbrc	r24, 6
 218:	04 c0       	rjmp	.+8      	; 0x222 <LCD_write_char+0x24>
 21a:	9b b3       	in	r25, 0x1b	; 27
 21c:	9f 7b       	andi	r25, 0xBF	; 191
 21e:	9b bb       	out	0x1b, r25	; 27
 220:	03 c0       	rjmp	.+6      	; 0x228 <LCD_write_char+0x2a>
 222:	9b b3       	in	r25, 0x1b	; 27
 224:	90 64       	ori	r25, 0x40	; 64
 226:	9b bb       	out	0x1b, r25	; 27
 228:	85 fd       	sbrc	r24, 5
 22a:	04 c0       	rjmp	.+8      	; 0x234 <LCD_write_char+0x36>
 22c:	9b b3       	in	r25, 0x1b	; 27
 22e:	9f 7d       	andi	r25, 0xDF	; 223
 230:	9b bb       	out	0x1b, r25	; 27
 232:	03 c0       	rjmp	.+6      	; 0x23a <LCD_write_char+0x3c>
 234:	9b b3       	in	r25, 0x1b	; 27
 236:	90 62       	ori	r25, 0x20	; 32
 238:	9b bb       	out	0x1b, r25	; 27
 23a:	84 fd       	sbrc	r24, 4
 23c:	04 c0       	rjmp	.+8      	; 0x246 <LCD_write_char+0x48>
 23e:	9b b3       	in	r25, 0x1b	; 27
 240:	9f 7e       	andi	r25, 0xEF	; 239
 242:	9b bb       	out	0x1b, r25	; 27
 244:	03 c0       	rjmp	.+6      	; 0x24c <LCD_write_char+0x4e>
 246:	9b b3       	in	r25, 0x1b	; 27
 248:	90 61       	ori	r25, 0x10	; 16
 24a:	9b bb       	out	0x1b, r25	; 27
 24c:	9b b3       	in	r25, 0x1b	; 27
 24e:	94 60       	ori	r25, 0x04	; 4
 250:	9b bb       	out	0x1b, r25	; 27
 252:	ef e9       	ldi	r30, 0x9F	; 159
 254:	ff e0       	ldi	r31, 0x0F	; 15
 256:	31 97       	sbiw	r30, 0x01	; 1
 258:	f1 f7       	brne	.-4      	; 0x256 <LCD_write_char+0x58>
 25a:	00 c0       	rjmp	.+0      	; 0x25c <LCD_write_char+0x5e>
 25c:	00 00       	nop
 25e:	9b b3       	in	r25, 0x1b	; 27
 260:	9b 7f       	andi	r25, 0xFB	; 251
 262:	9b bb       	out	0x1b, r25	; 27
 264:	ef e9       	ldi	r30, 0x9F	; 159
 266:	ff e0       	ldi	r31, 0x0F	; 15
 268:	31 97       	sbiw	r30, 0x01	; 1
 26a:	f1 f7       	brne	.-4      	; 0x268 <LCD_write_char+0x6a>
 26c:	00 c0       	rjmp	.+0      	; 0x26e <LCD_write_char+0x70>
 26e:	00 00       	nop
 270:	83 fd       	sbrc	r24, 3
 272:	04 c0       	rjmp	.+8      	; 0x27c <LCD_write_char+0x7e>
 274:	9b b3       	in	r25, 0x1b	; 27
 276:	9f 77       	andi	r25, 0x7F	; 127
 278:	9b bb       	out	0x1b, r25	; 27
 27a:	03 c0       	rjmp	.+6      	; 0x282 <LCD_write_char+0x84>
 27c:	9b b3       	in	r25, 0x1b	; 27
 27e:	90 68       	ori	r25, 0x80	; 128
 280:	9b bb       	out	0x1b, r25	; 27
 282:	82 fd       	sbrc	r24, 2
 284:	04 c0       	rjmp	.+8      	; 0x28e <LCD_write_char+0x90>
 286:	9b b3       	in	r25, 0x1b	; 27
 288:	9f 7b       	andi	r25, 0xBF	; 191
 28a:	9b bb       	out	0x1b, r25	; 27
 28c:	03 c0       	rjmp	.+6      	; 0x294 <LCD_write_char+0x96>
 28e:	9b b3       	in	r25, 0x1b	; 27
 290:	90 64       	ori	r25, 0x40	; 64
 292:	9b bb       	out	0x1b, r25	; 27
 294:	81 fd       	sbrc	r24, 1
 296:	04 c0       	rjmp	.+8      	; 0x2a0 <LCD_write_char+0xa2>
 298:	9b b3       	in	r25, 0x1b	; 27
 29a:	9f 7d       	andi	r25, 0xDF	; 223
 29c:	9b bb       	out	0x1b, r25	; 27
 29e:	03 c0       	rjmp	.+6      	; 0x2a6 <LCD_write_char+0xa8>
 2a0:	9b b3       	in	r25, 0x1b	; 27
 2a2:	90 62       	ori	r25, 0x20	; 32
 2a4:	9b bb       	out	0x1b, r25	; 27
 2a6:	80 fd       	sbrc	r24, 0
 2a8:	04 c0       	rjmp	.+8      	; 0x2b2 <LCD_write_char+0xb4>
 2aa:	8b b3       	in	r24, 0x1b	; 27
 2ac:	8f 7e       	andi	r24, 0xEF	; 239
 2ae:	8b bb       	out	0x1b, r24	; 27
 2b0:	03 c0       	rjmp	.+6      	; 0x2b8 <LCD_write_char+0xba>
 2b2:	8b b3       	in	r24, 0x1b	; 27
 2b4:	80 61       	ori	r24, 0x10	; 16
 2b6:	8b bb       	out	0x1b, r24	; 27
 2b8:	8b b3       	in	r24, 0x1b	; 27
 2ba:	84 60       	ori	r24, 0x04	; 4
 2bc:	8b bb       	out	0x1b, r24	; 27
 2be:	8f e9       	ldi	r24, 0x9F	; 159
 2c0:	9f e0       	ldi	r25, 0x0F	; 15
 2c2:	01 97       	sbiw	r24, 0x01	; 1
 2c4:	f1 f7       	brne	.-4      	; 0x2c2 <LCD_write_char+0xc4>
 2c6:	00 c0       	rjmp	.+0      	; 0x2c8 <LCD_write_char+0xca>
 2c8:	00 00       	nop
 2ca:	8b b3       	in	r24, 0x1b	; 27
 2cc:	8b 7f       	andi	r24, 0xFB	; 251
 2ce:	8b bb       	out	0x1b, r24	; 27
 2d0:	ef e9       	ldi	r30, 0x9F	; 159
 2d2:	ff e0       	ldi	r31, 0x0F	; 15
 2d4:	31 97       	sbiw	r30, 0x01	; 1
 2d6:	f1 f7       	brne	.-4      	; 0x2d4 <LCD_write_char+0xd6>
 2d8:	00 c0       	rjmp	.+0      	; 0x2da <LCD_write_char+0xdc>
 2da:	00 00       	nop
 2dc:	08 95       	ret

000002de <LCD_write_num>:

void LCD_write_num(uint32_t num)
{
 2de:	cf 92       	push	r12
 2e0:	df 92       	push	r13
 2e2:	ef 92       	push	r14
 2e4:	ff 92       	push	r15
 2e6:	1f 93       	push	r17
 2e8:	cf 93       	push	r28
 2ea:	df 93       	push	r29
 2ec:	cd b7       	in	r28, 0x3d	; 61
 2ee:	de b7       	in	r29, 0x3e	; 62
 2f0:	2a 97       	sbiw	r28, 0x0a	; 10
 2f2:	0f b6       	in	r0, 0x3f	; 63
 2f4:	f8 94       	cli
 2f6:	de bf       	out	0x3e, r29	; 62
 2f8:	0f be       	out	0x3f, r0	; 63
 2fa:	cd bf       	out	0x3d, r28	; 61
 2fc:	6b 01       	movw	r12, r22
 2fe:	7c 01       	movw	r14, r24
    0
*/
	int8_t i = 0;
	uint8_t num_arr[10];
	
	if(num == 0) LCD_write_char('0');
 300:	67 2b       	or	r22, r23
 302:	68 2b       	or	r22, r24
 304:	69 2b       	or	r22, r25
 306:	19 f4       	brne	.+6      	; 0x30e <LCD_write_num+0x30>
 308:	80 e3       	ldi	r24, 0x30	; 48
 30a:	0e 94 ff 00 	call	0x1fe	; 0x1fe <LCD_write_char>
		i++;
	}
}

void LCD_write_num(uint32_t num)
{
 30e:	10 e0       	ldi	r17, 0x00	; 0
 310:	17 c0       	rjmp	.+46     	; 0x340 <LCD_write_num+0x62>
	if(num == 0) LCD_write_char('0');
	
	for(i = 0; num != 0 ;i++)
	{
		// + 48  to convert decimal number into ASCII
		num_arr[i] = num % 10 + 48;
 312:	c7 01       	movw	r24, r14
 314:	b6 01       	movw	r22, r12
 316:	2a e0       	ldi	r18, 0x0A	; 10
 318:	30 e0       	ldi	r19, 0x00	; 0
 31a:	40 e0       	ldi	r20, 0x00	; 0
 31c:	50 e0       	ldi	r21, 0x00	; 0
 31e:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <__udivmodsi4>
 322:	e1 e0       	ldi	r30, 0x01	; 1
 324:	f0 e0       	ldi	r31, 0x00	; 0
 326:	ec 0f       	add	r30, r28
 328:	fd 1f       	adc	r31, r29
 32a:	e1 0f       	add	r30, r17
 32c:	f1 1d       	adc	r31, r1
 32e:	17 fd       	sbrc	r17, 7
 330:	fa 95       	dec	r31
 332:	60 5d       	subi	r22, 0xD0	; 208
 334:	60 83       	st	Z, r22
		num /= 10;
 336:	c2 2e       	mov	r12, r18
 338:	d3 2e       	mov	r13, r19
 33a:	e4 2e       	mov	r14, r20
 33c:	f5 2e       	mov	r15, r21
	int8_t i = 0;
	uint8_t num_arr[10];
	
	if(num == 0) LCD_write_char('0');
	
	for(i = 0; num != 0 ;i++)
 33e:	1f 5f       	subi	r17, 0xFF	; 255
 340:	c1 14       	cp	r12, r1
 342:	d1 04       	cpc	r13, r1
 344:	e1 04       	cpc	r14, r1
 346:	f1 04       	cpc	r15, r1
 348:	21 f7       	brne	.-56     	; 0x312 <LCD_write_num+0x34>
		// + 48  to convert decimal number into ASCII
		num_arr[i] = num % 10 + 48;
		num /= 10;
	}
	
	i--;
 34a:	11 50       	subi	r17, 0x01	; 1
	while (i >= 0)
 34c:	0c c0       	rjmp	.+24     	; 0x366 <LCD_write_num+0x88>
	{
		LCD_write_char(num_arr[i]);
 34e:	e1 e0       	ldi	r30, 0x01	; 1
 350:	f0 e0       	ldi	r31, 0x00	; 0
 352:	ec 0f       	add	r30, r28
 354:	fd 1f       	adc	r31, r29
 356:	e1 0f       	add	r30, r17
 358:	f1 1d       	adc	r31, r1
 35a:	17 fd       	sbrc	r17, 7
 35c:	fa 95       	dec	r31
 35e:	80 81       	ld	r24, Z
 360:	0e 94 ff 00 	call	0x1fe	; 0x1fe <LCD_write_char>
		i--;
 364:	11 50       	subi	r17, 0x01	; 1
		num_arr[i] = num % 10 + 48;
		num /= 10;
	}
	
	i--;
	while (i >= 0)
 366:	11 23       	and	r17, r17
 368:	94 f7       	brge	.-28     	; 0x34e <LCD_write_num+0x70>
	{
		LCD_write_char(num_arr[i]);
		i--;
	}
 36a:	2a 96       	adiw	r28, 0x0a	; 10
 36c:	0f b6       	in	r0, 0x3f	; 63
 36e:	f8 94       	cli
 370:	de bf       	out	0x3e, r29	; 62
 372:	0f be       	out	0x3f, r0	; 63
 374:	cd bf       	out	0x3d, r28	; 61
 376:	df 91       	pop	r29
 378:	cf 91       	pop	r28
 37a:	1f 91       	pop	r17
 37c:	ff 90       	pop	r15
 37e:	ef 90       	pop	r14
 380:	df 90       	pop	r13
 382:	cf 90       	pop	r12
 384:	08 95       	ret

00000386 <main>:
#include "headers/I2C.h"
#include "headers/LCD.h"

int main(void)
{
	LCD_init();
 386:	0e 94 bf 00 	call	0x17e	; 0x17e <LCD_init>
	I2C_slave_Init(15);
 38a:	8f e0       	ldi	r24, 0x0F	; 15
 38c:	0e 94 36 00 	call	0x6c	; 0x6c <I2C_slave_Init>
	
    uint8_t data = 0;
	
    while (1) 
    {
		if(I2C_slave_available()== 1)
 390:	0e 94 3c 00 	call	0x78	; 0x78 <I2C_slave_available>
 394:	81 30       	cpi	r24, 0x01	; 1
 396:	e1 f7       	brne	.-8      	; 0x390 <main+0xa>
		{
			data = I2C_slave_read();
 398:	0e 94 48 00 	call	0x90	; 0x90 <I2C_slave_read>
 39c:	c8 2f       	mov	r28, r24
			LCD_write_command(0x80);
 39e:	80 e8       	ldi	r24, 0x80	; 128
 3a0:	0e 94 4f 00 	call	0x9e	; 0x9e <LCD_write_command>
			LCD_write_num(data);
 3a4:	6c 2f       	mov	r22, r28
 3a6:	70 e0       	ldi	r23, 0x00	; 0
 3a8:	80 e0       	ldi	r24, 0x00	; 0
 3aa:	90 e0       	ldi	r25, 0x00	; 0
 3ac:	0e 94 6f 01 	call	0x2de	; 0x2de <LCD_write_num>
 3b0:	ef cf       	rjmp	.-34     	; 0x390 <main+0xa>

000003b2 <__udivmodsi4>:
 3b2:	a1 e2       	ldi	r26, 0x21	; 33
 3b4:	1a 2e       	mov	r1, r26
 3b6:	aa 1b       	sub	r26, r26
 3b8:	bb 1b       	sub	r27, r27
 3ba:	fd 01       	movw	r30, r26
 3bc:	0d c0       	rjmp	.+26     	; 0x3d8 <__udivmodsi4_ep>

000003be <__udivmodsi4_loop>:
 3be:	aa 1f       	adc	r26, r26
 3c0:	bb 1f       	adc	r27, r27
 3c2:	ee 1f       	adc	r30, r30
 3c4:	ff 1f       	adc	r31, r31
 3c6:	a2 17       	cp	r26, r18
 3c8:	b3 07       	cpc	r27, r19
 3ca:	e4 07       	cpc	r30, r20
 3cc:	f5 07       	cpc	r31, r21
 3ce:	20 f0       	brcs	.+8      	; 0x3d8 <__udivmodsi4_ep>
 3d0:	a2 1b       	sub	r26, r18
 3d2:	b3 0b       	sbc	r27, r19
 3d4:	e4 0b       	sbc	r30, r20
 3d6:	f5 0b       	sbc	r31, r21

000003d8 <__udivmodsi4_ep>:
 3d8:	66 1f       	adc	r22, r22
 3da:	77 1f       	adc	r23, r23
 3dc:	88 1f       	adc	r24, r24
 3de:	99 1f       	adc	r25, r25
 3e0:	1a 94       	dec	r1
 3e2:	69 f7       	brne	.-38     	; 0x3be <__udivmodsi4_loop>
 3e4:	60 95       	com	r22
 3e6:	70 95       	com	r23
 3e8:	80 95       	com	r24
 3ea:	90 95       	com	r25
 3ec:	9b 01       	movw	r18, r22
 3ee:	ac 01       	movw	r20, r24
 3f0:	bd 01       	movw	r22, r26
 3f2:	cf 01       	movw	r24, r30
 3f4:	08 95       	ret

000003f6 <_exit>:
 3f6:	f8 94       	cli

000003f8 <__stop_program>:
 3f8:	ff cf       	rjmp	.-2      	; 0x3f8 <__stop_program>
