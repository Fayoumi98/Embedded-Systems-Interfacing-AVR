
Section_7_UART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ae  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000102  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000102  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000134  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  00000170  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000747  00000000  00000000  000001c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000681  00000000  00000000  0000090f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000393  00000000  00000000  00000f90  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000088  00000000  00000000  00001324  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000037b  00000000  00000000  000013ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000bb  00000000  00000000  00001727  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  000017e2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include "headers/headers.h"
#include "headers/UART.h"

int main(void)
{
	Uart_init();
  6c:	0e 94 48 00 	call	0x90	; 0x90 <Uart_init>

	uint8_t i = 0;
  70:	80 e0       	ldi	r24, 0x00	; 0
	
    while (1) 
    {
		Uart_Transmit(i++);
  72:	c1 e0       	ldi	r28, 0x01	; 1
  74:	c8 0f       	add	r28, r24
  76:	0e 94 51 00 	call	0xa2	; 0xa2 <Uart_Transmit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  7a:	2f ef       	ldi	r18, 0xFF	; 255
  7c:	81 ee       	ldi	r24, 0xE1	; 225
  7e:	94 e0       	ldi	r25, 0x04	; 4
  80:	21 50       	subi	r18, 0x01	; 1
  82:	80 40       	sbci	r24, 0x00	; 0
  84:	90 40       	sbci	r25, 0x00	; 0
  86:	e1 f7       	brne	.-8      	; 0x80 <main+0x14>
  88:	00 c0       	rjmp	.+0      	; 0x8a <main+0x1e>
  8a:	00 00       	nop
  8c:	8c 2f       	mov	r24, r28
  8e:	f1 cf       	rjmp	.-30     	; 0x72 <main+0x6>

00000090 <Uart_init>:


void Uart_init(void)
{
	// baud rate register (calculated from formula table 60 or from table 71)
	UBRRL = 103;
  90:	87 e6       	ldi	r24, 0x67	; 103
  92:	89 b9       	out	0x09, r24	; 9
	
	// 
	UCSRB |= (1 << RXEN) | (1 << TXEN);
  94:	8a b1       	in	r24, 0x0a	; 10
  96:	88 61       	ori	r24, 0x18	; 24
  98:	8a b9       	out	0x0a, r24	; 10
	// enable 8 bit mode (from table 66)
	// Set   UCSZ2 = 0		UCSZ1 = 1		UCSZ0 = 1
	UCSRB |= (1 << UCSZ1) | (1 << UCSZ0) ;
  9a:	8a b1       	in	r24, 0x0a	; 10
  9c:	86 60       	ori	r24, 0x06	; 6
  9e:	8a b9       	out	0x0a, r24	; 10
  a0:	08 95       	ret

000000a2 <Uart_Transmit>:


void Uart_Transmit(uint8_t data)
{
	// write data on USART I/O Data	Register – UDR
	UDR = data;
  a2:	8c b9       	out	0x0c, r24	; 12
	while(READBIT(UCSRA,TXC) == 0);
  a4:	5e 9b       	sbis	0x0b, 6	; 11
  a6:	fe cf       	rjmp	.-4      	; 0xa4 <Uart_Transmit+0x2>
}
  a8:	08 95       	ret

000000aa <_exit>:
  aa:	f8 94       	cli

000000ac <__stop_program>:
  ac:	ff cf       	rjmp	.-2      	; 0xac <__stop_program>
